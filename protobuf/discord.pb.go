// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: discord.proto

package sandwich

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{0}
}

func (x *Account) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Account) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          int64       `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Url           string      `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Timestamps    *Timestamps `protobuf:"bytes,4,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	ApplicationID int64       `protobuf:"varint,5,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	Details       string      `protobuf:"bytes,6,opt,name=details,proto3" json:"details,omitempty"`
	State         string      `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	Party         *Party      `protobuf:"bytes,8,opt,name=party,proto3" json:"party,omitempty"`
	Assets        *Assets     `protobuf:"bytes,9,opt,name=assets,proto3" json:"assets,omitempty"`
	Secrets       *Secrets    `protobuf:"bytes,10,opt,name=secrets,proto3" json:"secrets,omitempty"`
	Instance      bool        `protobuf:"varint,11,opt,name=instance,proto3" json:"instance,omitempty"`
	Flags         int64       `protobuf:"varint,12,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{1}
}

func (x *Activity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Activity) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Activity) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Activity) GetTimestamps() *Timestamps {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *Activity) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *Activity) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *Activity) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Activity) GetParty() *Party {
	if x != nil {
		return x.Party
	}
	return nil
}

func (x *Activity) GetAssets() *Assets {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *Activity) GetSecrets() *Secrets {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Activity) GetInstance() bool {
	if x != nil {
		return x.Instance
	}
	return false
}

func (x *Activity) GetFlags() int64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon                string           `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Description         string           `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	RpcOrigins          []string         `protobuf:"bytes,5,rep,name=rpcOrigins,proto3" json:"rpcOrigins,omitempty"`
	BotPublic           bool             `protobuf:"varint,6,opt,name=botPublic,proto3" json:"botPublic,omitempty"`
	BotRequireCodeGrant bool             `protobuf:"varint,7,opt,name=botRequireCodeGrant,proto3" json:"botRequireCodeGrant,omitempty"`
	TermsOfServiceURL   string           `protobuf:"bytes,8,opt,name=termsOfServiceURL,proto3" json:"termsOfServiceURL,omitempty"`
	PrivacyPolicyURL    string           `protobuf:"bytes,9,opt,name=privacyPolicyURL,proto3" json:"privacyPolicyURL,omitempty"`
	Owner               *User            `protobuf:"bytes,10,opt,name=owner,proto3" json:"owner,omitempty"`
	Summary             string           `protobuf:"bytes,11,opt,name=summary,proto3" json:"summary,omitempty"`
	VerifyKey           string           `protobuf:"bytes,12,opt,name=verifyKey,proto3" json:"verifyKey,omitempty"`
	Team                *ApplicationTeam `protobuf:"bytes,13,opt,name=team,proto3" json:"team,omitempty"`
	GuildID             int64            `protobuf:"varint,14,opt,name=guildID,proto3" json:"guildID,omitempty"`
	PrimarySKUID        int64            `protobuf:"varint,15,opt,name=primarySKUID,proto3" json:"primarySKUID,omitempty"`
	Slug                string           `protobuf:"bytes,16,opt,name=slug,proto3" json:"slug,omitempty"`
	CoverImage          string           `protobuf:"bytes,17,opt,name=coverImage,proto3" json:"coverImage,omitempty"`
	Flags               int64            `protobuf:"varint,18,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Application) Reset() {
	*x = Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{2}
}

func (x *Application) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Application) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Application) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Application) GetRpcOrigins() []string {
	if x != nil {
		return x.RpcOrigins
	}
	return nil
}

func (x *Application) GetBotPublic() bool {
	if x != nil {
		return x.BotPublic
	}
	return false
}

func (x *Application) GetBotRequireCodeGrant() bool {
	if x != nil {
		return x.BotRequireCodeGrant
	}
	return false
}

func (x *Application) GetTermsOfServiceURL() string {
	if x != nil {
		return x.TermsOfServiceURL
	}
	return ""
}

func (x *Application) GetPrivacyPolicyURL() string {
	if x != nil {
		return x.PrivacyPolicyURL
	}
	return ""
}

func (x *Application) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Application) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Application) GetVerifyKey() string {
	if x != nil {
		return x.VerifyKey
	}
	return ""
}

func (x *Application) GetTeam() *ApplicationTeam {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *Application) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *Application) GetPrimarySKUID() int64 {
	if x != nil {
		return x.PrimarySKUID
	}
	return 0
}

func (x *Application) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Application) GetCoverImage() string {
	if x != nil {
		return x.CoverImage
	}
	return ""
}

func (x *Application) GetFlags() int64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type ApplicationCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type              int64                       `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	ApplicationID     int64                       `protobuf:"varint,3,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	GuildID           int64                       `protobuf:"varint,4,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Name              string                      `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description       string                      `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Options           []*ApplicationCommandOption `protobuf:"bytes,7,rep,name=options,proto3" json:"options,omitempty"`
	DefaultPermission bool                        `protobuf:"varint,8,opt,name=defaultPermission,proto3" json:"defaultPermission,omitempty"`
}

func (x *ApplicationCommand) Reset() {
	*x = ApplicationCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCommand) ProtoMessage() {}

func (x *ApplicationCommand) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCommand.ProtoReflect.Descriptor instead.
func (*ApplicationCommand) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{3}
}

func (x *ApplicationCommand) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ApplicationCommand) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ApplicationCommand) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *ApplicationCommand) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *ApplicationCommand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationCommand) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApplicationCommand) GetOptions() []*ApplicationCommandOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ApplicationCommand) GetDefaultPermission() bool {
	if x != nil {
		return x.DefaultPermission
	}
	return false
}

type ApplicationCommandOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        int64                             `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Name        string                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Required    bool                              `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
	Choices     []*ApplicationCommandOptionChoice `protobuf:"bytes,5,rep,name=choices,proto3" json:"choices,omitempty"`
	Options     []*ApplicationCommandOption       `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *ApplicationCommandOption) Reset() {
	*x = ApplicationCommandOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationCommandOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCommandOption) ProtoMessage() {}

func (x *ApplicationCommandOption) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCommandOption.ProtoReflect.Descriptor instead.
func (*ApplicationCommandOption) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{4}
}

func (x *ApplicationCommandOption) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ApplicationCommandOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationCommandOption) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApplicationCommandOption) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *ApplicationCommandOption) GetChoices() []*ApplicationCommandOptionChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *ApplicationCommandOption) GetOptions() []*ApplicationCommandOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type ApplicationCommandOptionChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ApplicationCommandOptionChoice) Reset() {
	*x = ApplicationCommandOptionChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationCommandOptionChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationCommandOptionChoice) ProtoMessage() {}

func (x *ApplicationCommandOptionChoice) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationCommandOptionChoice.ProtoReflect.Descriptor instead.
func (*ApplicationCommandOptionChoice) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{5}
}

func (x *ApplicationCommandOptionChoice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationCommandOptionChoice) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ApplicationSelectOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label       string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Value       string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Emoji       *Emoji `protobuf:"bytes,4,opt,name=emoji,proto3" json:"emoji,omitempty"`
	Default     bool   `protobuf:"varint,5,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *ApplicationSelectOption) Reset() {
	*x = ApplicationSelectOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationSelectOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationSelectOption) ProtoMessage() {}

func (x *ApplicationSelectOption) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationSelectOption.ProtoReflect.Descriptor instead.
func (*ApplicationSelectOption) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{6}
}

func (x *ApplicationSelectOption) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ApplicationSelectOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ApplicationSelectOption) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApplicationSelectOption) GetEmoji() *Emoji {
	if x != nil {
		return x.Emoji
	}
	return nil
}

func (x *ApplicationSelectOption) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

type ApplicationTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon        string                   `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	Id          int64                    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Members     []*ApplicationTeamMember `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
	Name        string                   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	OwnerUserID int64                    `protobuf:"varint,5,opt,name=ownerUserID,proto3" json:"ownerUserID,omitempty"`
}

func (x *ApplicationTeam) Reset() {
	*x = ApplicationTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationTeam) ProtoMessage() {}

func (x *ApplicationTeam) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationTeam.ProtoReflect.Descriptor instead.
func (*ApplicationTeam) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{7}
}

func (x *ApplicationTeam) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ApplicationTeam) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ApplicationTeam) GetMembers() []*ApplicationTeamMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ApplicationTeam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationTeam) GetOwnerUserID() int64 {
	if x != nil {
		return x.OwnerUserID
	}
	return 0
}

type ApplicationTeamMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MembershipState int64    `protobuf:"varint,1,opt,name=membershipState,proto3" json:"membershipState,omitempty"`
	Permissions     []string `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty"`
	TeamID          int64    `protobuf:"varint,3,opt,name=teamID,proto3" json:"teamID,omitempty"`
	User            *User    `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ApplicationTeamMember) Reset() {
	*x = ApplicationTeamMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationTeamMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationTeamMember) ProtoMessage() {}

func (x *ApplicationTeamMember) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationTeamMember.ProtoReflect.Descriptor instead.
func (*ApplicationTeamMember) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{8}
}

func (x *ApplicationTeamMember) GetMembershipState() int64 {
	if x != nil {
		return x.MembershipState
	}
	return 0
}

func (x *ApplicationTeamMember) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *ApplicationTeamMember) GetTeamID() int64 {
	if x != nil {
		return x.TeamID
	}
	return 0
}

func (x *ApplicationTeamMember) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type Assets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeImage string `protobuf:"bytes,1,opt,name=largeImage,proto3" json:"largeImage,omitempty"`
	LargeText  string `protobuf:"bytes,2,opt,name=largeText,proto3" json:"largeText,omitempty"`
	SmallImage string `protobuf:"bytes,3,opt,name=smallImage,proto3" json:"smallImage,omitempty"`
	SmallText  string `protobuf:"bytes,4,opt,name=smallText,proto3" json:"smallText,omitempty"`
}

func (x *Assets) Reset() {
	*x = Assets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assets) ProtoMessage() {}

func (x *Assets) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assets.ProtoReflect.Descriptor instead.
func (*Assets) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{9}
}

func (x *Assets) GetLargeImage() string {
	if x != nil {
		return x.LargeImage
	}
	return ""
}

func (x *Assets) GetLargeText() string {
	if x != nil {
		return x.LargeText
	}
	return ""
}

func (x *Assets) GetSmallImage() string {
	if x != nil {
		return x.SmallImage
	}
	return ""
}

func (x *Assets) GetSmallText() string {
	if x != nil {
		return x.SmallText
	}
	return ""
}

type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                       int64               `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	GuildID                    int64               `protobuf:"varint,3,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Position                   int64               `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
	PermissionOverwrites       []*ChannelOverwrite `protobuf:"bytes,5,rep,name=permissionOverwrites,proto3" json:"permissionOverwrites,omitempty"`
	Name                       string              `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Topic                      string              `protobuf:"bytes,7,opt,name=topic,proto3" json:"topic,omitempty"`
	NSFW                       bool                `protobuf:"varint,8,opt,name=NSFW,proto3" json:"NSFW,omitempty"`
	LastMessageID              string              `protobuf:"bytes,9,opt,name=lastMessageID,proto3" json:"lastMessageID,omitempty"`
	Bitrate                    int64               `protobuf:"varint,10,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	UserLimit                  int64               `protobuf:"varint,11,opt,name=userLimit,proto3" json:"userLimit,omitempty"`
	RateLimitPerUser           int64               `protobuf:"varint,12,opt,name=rateLimitPerUser,proto3" json:"rateLimitPerUser,omitempty"`
	Recipients                 []*User             `protobuf:"bytes,13,rep,name=recipients,proto3" json:"recipients,omitempty"`
	Icon                       string              `protobuf:"bytes,14,opt,name=icon,proto3" json:"icon,omitempty"`
	OwnerID                    int64               `protobuf:"varint,15,opt,name=ownerID,proto3" json:"ownerID,omitempty"`
	ApplicationID              int64               `protobuf:"varint,16,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	ParentID                   int64               `protobuf:"varint,17,opt,name=parentID,proto3" json:"parentID,omitempty"`
	LastPinTimestamp           string              `protobuf:"bytes,18,opt,name=lastPinTimestamp,proto3" json:"lastPinTimestamp,omitempty"`
	RtcRegion                  string              `protobuf:"bytes,19,opt,name=rtcRegion,proto3" json:"rtcRegion,omitempty"`
	MessageCount               int64               `protobuf:"varint,20,opt,name=messageCount,proto3" json:"messageCount,omitempty"`
	MemberCount                int64               `protobuf:"varint,21,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	ThreadMetadata             *ThreadMetadata     `protobuf:"bytes,22,opt,name=threadMetadata,proto3" json:"threadMetadata,omitempty"`
	ThreadMember               *ThreadMember       `protobuf:"bytes,23,opt,name=threadMember,proto3" json:"threadMember,omitempty"`
	DefaultAutoArchiveDuration int64               `protobuf:"varint,24,opt,name=defaultAutoArchiveDuration,proto3" json:"defaultAutoArchiveDuration,omitempty"`
	Permissions                string              `protobuf:"bytes,25,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{10}
}

func (x *Channel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Channel) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Channel) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *Channel) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Channel) GetPermissionOverwrites() []*ChannelOverwrite {
	if x != nil {
		return x.PermissionOverwrites
	}
	return nil
}

func (x *Channel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Channel) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Channel) GetNSFW() bool {
	if x != nil {
		return x.NSFW
	}
	return false
}

func (x *Channel) GetLastMessageID() string {
	if x != nil {
		return x.LastMessageID
	}
	return ""
}

func (x *Channel) GetBitrate() int64 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *Channel) GetUserLimit() int64 {
	if x != nil {
		return x.UserLimit
	}
	return 0
}

func (x *Channel) GetRateLimitPerUser() int64 {
	if x != nil {
		return x.RateLimitPerUser
	}
	return 0
}

func (x *Channel) GetRecipients() []*User {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *Channel) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Channel) GetOwnerID() int64 {
	if x != nil {
		return x.OwnerID
	}
	return 0
}

func (x *Channel) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *Channel) GetParentID() int64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *Channel) GetLastPinTimestamp() string {
	if x != nil {
		return x.LastPinTimestamp
	}
	return ""
}

func (x *Channel) GetRtcRegion() string {
	if x != nil {
		return x.RtcRegion
	}
	return ""
}

func (x *Channel) GetMessageCount() int64 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

func (x *Channel) GetMemberCount() int64 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *Channel) GetThreadMetadata() *ThreadMetadata {
	if x != nil {
		return x.ThreadMetadata
	}
	return nil
}

func (x *Channel) GetThreadMember() *ThreadMember {
	if x != nil {
		return x.ThreadMember
	}
	return nil
}

func (x *Channel) GetDefaultAutoArchiveDuration() int64 {
	if x != nil {
		return x.DefaultAutoArchiveDuration
	}
	return 0
}

func (x *Channel) GetPermissions() string {
	if x != nil {
		return x.Permissions
	}
	return ""
}

type ChannelCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *ChannelCreate) Reset() {
	*x = ChannelCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCreate) ProtoMessage() {}

func (x *ChannelCreate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCreate.ProtoReflect.Descriptor instead.
func (*ChannelCreate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{11}
}

func (x *ChannelCreate) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ChannelDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *ChannelDelete) Reset() {
	*x = ChannelDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDelete) ProtoMessage() {}

func (x *ChannelDelete) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDelete.ProtoReflect.Descriptor instead.
func (*ChannelDelete) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{12}
}

func (x *ChannelDelete) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ChannelOverwrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Allow int64  `protobuf:"varint,3,opt,name=allow,proto3" json:"allow,omitempty"`
	Deny  int64  `protobuf:"varint,4,opt,name=deny,proto3" json:"deny,omitempty"`
}

func (x *ChannelOverwrite) Reset() {
	*x = ChannelOverwrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelOverwrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelOverwrite) ProtoMessage() {}

func (x *ChannelOverwrite) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelOverwrite.ProtoReflect.Descriptor instead.
func (*ChannelOverwrite) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{13}
}

func (x *ChannelOverwrite) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelOverwrite) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChannelOverwrite) GetAllow() int64 {
	if x != nil {
		return x.Allow
	}
	return 0
}

func (x *ChannelOverwrite) GetDeny() int64 {
	if x != nil {
		return x.Deny
	}
	return 0
}

type ChannelPinsUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID          int64  `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	ChannelID        int64  `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
	LastPinTimestamp string `protobuf:"bytes,3,opt,name=lastPinTimestamp,proto3" json:"lastPinTimestamp,omitempty"`
}

func (x *ChannelPinsUpdate) Reset() {
	*x = ChannelPinsUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPinsUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPinsUpdate) ProtoMessage() {}

func (x *ChannelPinsUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPinsUpdate.ProtoReflect.Descriptor instead.
func (*ChannelPinsUpdate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{14}
}

func (x *ChannelPinsUpdate) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *ChannelPinsUpdate) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *ChannelPinsUpdate) GetLastPinTimestamp() string {
	if x != nil {
		return x.LastPinTimestamp
	}
	return ""
}

type ChannelUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *ChannelUpdate) Reset() {
	*x = ChannelUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUpdate) ProtoMessage() {}

func (x *ChannelUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUpdate.ProtoReflect.Descriptor instead.
func (*ChannelUpdate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{15}
}

func (x *ChannelUpdate) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ClientStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desktop string `protobuf:"bytes,1,opt,name=desktop,proto3" json:"desktop,omitempty"`
	Mobile  string `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Web     string `protobuf:"bytes,3,opt,name=web,proto3" json:"web,omitempty"`
}

func (x *ClientStatus) Reset() {
	*x = ClientStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStatus) ProtoMessage() {}

func (x *ClientStatus) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStatus.ProtoReflect.Descriptor instead.
func (*ClientStatus) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{16}
}

func (x *ClientStatus) GetDesktop() string {
	if x != nil {
		return x.Desktop
	}
	return ""
}

func (x *ClientStatus) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *ClientStatus) GetWeb() string {
	if x != nil {
		return x.Web
	}
	return ""
}

type Embed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string          `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Type        string          `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Description string          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Url         string          `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Timestamp   string          `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Color       int64           `protobuf:"varint,6,opt,name=color,proto3" json:"color,omitempty"`
	Footer      *EmbedFooter    `protobuf:"bytes,7,opt,name=footer,proto3" json:"footer,omitempty"`
	Image       *EmbedImage     `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`
	Thumbnail   *EmbedThumbnail `protobuf:"bytes,9,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Video       *EmbedVideo     `protobuf:"bytes,10,opt,name=video,proto3" json:"video,omitempty"`
	Provider    *EmbedProvider  `protobuf:"bytes,11,opt,name=provider,proto3" json:"provider,omitempty"`
	Author      *EmbedAuthor    `protobuf:"bytes,12,opt,name=author,proto3" json:"author,omitempty"`
	Fields      []*EmbedField   `protobuf:"bytes,13,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Embed) Reset() {
	*x = Embed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Embed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Embed) ProtoMessage() {}

func (x *Embed) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Embed.ProtoReflect.Descriptor instead.
func (*Embed) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{17}
}

func (x *Embed) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Embed) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Embed) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Embed) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Embed) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Embed) GetColor() int64 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Embed) GetFooter() *EmbedFooter {
	if x != nil {
		return x.Footer
	}
	return nil
}

func (x *Embed) GetImage() *EmbedImage {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Embed) GetThumbnail() *EmbedThumbnail {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *Embed) GetVideo() *EmbedVideo {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *Embed) GetProvider() *EmbedProvider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *Embed) GetAuthor() *EmbedAuthor {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Embed) GetFields() []*EmbedField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type EmbedAuthor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url          string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	IconURL      string `protobuf:"bytes,3,opt,name=iconURL,proto3" json:"iconURL,omitempty"`
	ProxyIconURL string `protobuf:"bytes,4,opt,name=proxyIconURL,proto3" json:"proxyIconURL,omitempty"`
}

func (x *EmbedAuthor) Reset() {
	*x = EmbedAuthor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedAuthor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedAuthor) ProtoMessage() {}

func (x *EmbedAuthor) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedAuthor.ProtoReflect.Descriptor instead.
func (*EmbedAuthor) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{18}
}

func (x *EmbedAuthor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EmbedAuthor) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EmbedAuthor) GetIconURL() string {
	if x != nil {
		return x.IconURL
	}
	return ""
}

func (x *EmbedAuthor) GetProxyIconURL() string {
	if x != nil {
		return x.ProxyIconURL
	}
	return ""
}

type EmbedField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Inline bool   `protobuf:"varint,3,opt,name=inline,proto3" json:"inline,omitempty"`
}

func (x *EmbedField) Reset() {
	*x = EmbedField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedField) ProtoMessage() {}

func (x *EmbedField) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedField.ProtoReflect.Descriptor instead.
func (*EmbedField) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{19}
}

func (x *EmbedField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EmbedField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EmbedField) GetInline() bool {
	if x != nil {
		return x.Inline
	}
	return false
}

type EmbedFooter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	IconURL      string `protobuf:"bytes,2,opt,name=iconURL,proto3" json:"iconURL,omitempty"`
	ProxyIconURL string `protobuf:"bytes,3,opt,name=proxyIconURL,proto3" json:"proxyIconURL,omitempty"`
}

func (x *EmbedFooter) Reset() {
	*x = EmbedFooter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedFooter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedFooter) ProtoMessage() {}

func (x *EmbedFooter) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedFooter.ProtoReflect.Descriptor instead.
func (*EmbedFooter) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{20}
}

func (x *EmbedFooter) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *EmbedFooter) GetIconURL() string {
	if x != nil {
		return x.IconURL
	}
	return ""
}

func (x *EmbedFooter) GetProxyIconURL() string {
	if x != nil {
		return x.ProxyIconURL
	}
	return ""
}

type EmbedImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ProxyURL string `protobuf:"bytes,2,opt,name=proxyURL,proto3" json:"proxyURL,omitempty"`
	Height   int64  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Width    int64  `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *EmbedImage) Reset() {
	*x = EmbedImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedImage) ProtoMessage() {}

func (x *EmbedImage) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedImage.ProtoReflect.Descriptor instead.
func (*EmbedImage) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{21}
}

func (x *EmbedImage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EmbedImage) GetProxyURL() string {
	if x != nil {
		return x.ProxyURL
	}
	return ""
}

func (x *EmbedImage) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *EmbedImage) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

type EmbedProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *EmbedProvider) Reset() {
	*x = EmbedProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedProvider) ProtoMessage() {}

func (x *EmbedProvider) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedProvider.ProtoReflect.Descriptor instead.
func (*EmbedProvider) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{22}
}

func (x *EmbedProvider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EmbedProvider) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type EmbedThumbnail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ProxyURL string `protobuf:"bytes,2,opt,name=proxyURL,proto3" json:"proxyURL,omitempty"`
	Height   int64  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Width    int64  `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *EmbedThumbnail) Reset() {
	*x = EmbedThumbnail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedThumbnail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedThumbnail) ProtoMessage() {}

func (x *EmbedThumbnail) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedThumbnail.ProtoReflect.Descriptor instead.
func (*EmbedThumbnail) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{23}
}

func (x *EmbedThumbnail) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EmbedThumbnail) GetProxyURL() string {
	if x != nil {
		return x.ProxyURL
	}
	return ""
}

func (x *EmbedThumbnail) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *EmbedThumbnail) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

type EmbedVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Height int64  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Width  int64  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *EmbedVideo) Reset() {
	*x = EmbedVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedVideo) ProtoMessage() {}

func (x *EmbedVideo) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedVideo.ProtoReflect.Descriptor instead.
func (*EmbedVideo) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{24}
}

func (x *EmbedVideo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EmbedVideo) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *EmbedVideo) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

type Emoji struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Roles         []int64 `protobuf:"varint,3,rep,packed,name=roles,proto3" json:"roles,omitempty"`
	User          *User   `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	RequireColons bool    `protobuf:"varint,5,opt,name=requireColons,proto3" json:"requireColons,omitempty"`
	Managed       bool    `protobuf:"varint,6,opt,name=managed,proto3" json:"managed,omitempty"`
	Animated      bool    `protobuf:"varint,7,opt,name=animated,proto3" json:"animated,omitempty"`
	Available     bool    `protobuf:"varint,8,opt,name=available,proto3" json:"available,omitempty"`
}

func (x *Emoji) Reset() {
	*x = Emoji{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emoji) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emoji) ProtoMessage() {}

func (x *Emoji) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emoji.ProtoReflect.Descriptor instead.
func (*Emoji) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{25}
}

func (x *Emoji) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Emoji) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Emoji) GetRoles() []int64 {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Emoji) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Emoji) GetRequireColons() bool {
	if x != nil {
		return x.RequireColons
	}
	return false
}

func (x *Emoji) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *Emoji) GetAnimated() bool {
	if x != nil {
		return x.Animated
	}
	return false
}

func (x *Emoji) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

type Gateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Gateway) Reset() {
	*x = Gateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway) ProtoMessage() {}

func (x *Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway.ProtoReflect.Descriptor instead.
func (*Gateway) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{26}
}

func (x *Gateway) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GatewayBot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url               string                       `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Shards            int64                        `protobuf:"varint,2,opt,name=shards,proto3" json:"shards,omitempty"`
	SessionStartLimit *GatewayBotSessionStartLimit `protobuf:"bytes,3,opt,name=sessionStartLimit,proto3" json:"sessionStartLimit,omitempty"`
}

func (x *GatewayBot) Reset() {
	*x = GatewayBot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayBot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayBot) ProtoMessage() {}

func (x *GatewayBot) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayBot.ProtoReflect.Descriptor instead.
func (*GatewayBot) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{27}
}

func (x *GatewayBot) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GatewayBot) GetShards() int64 {
	if x != nil {
		return x.Shards
	}
	return 0
}

func (x *GatewayBot) GetSessionStartLimit() *GatewayBotSessionStartLimit {
	if x != nil {
		return x.SessionStartLimit
	}
	return nil
}

type GatewayBotSessionStartLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total          int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Remaining      int64 `protobuf:"varint,2,opt,name=remaining,proto3" json:"remaining,omitempty"`
	ResetAfter     int64 `protobuf:"varint,3,opt,name=resetAfter,proto3" json:"resetAfter,omitempty"`
	MaxConcurrency int64 `protobuf:"varint,4,opt,name=maxConcurrency,proto3" json:"maxConcurrency,omitempty"`
}

func (x *GatewayBotSessionStartLimit) Reset() {
	*x = GatewayBotSessionStartLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayBotSessionStartLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayBotSessionStartLimit) ProtoMessage() {}

func (x *GatewayBotSessionStartLimit) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayBotSessionStartLimit.ProtoReflect.Descriptor instead.
func (*GatewayBotSessionStartLimit) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{28}
}

func (x *GatewayBotSessionStartLimit) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GatewayBotSessionStartLimit) GetRemaining() int64 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *GatewayBotSessionStartLimit) GetResetAfter() int64 {
	if x != nil {
		return x.ResetAfter
	}
	return 0
}

func (x *GatewayBotSessionStartLimit) GetMaxConcurrency() int64 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

type GatewayPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op       int64  `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Sequence int64  `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Type     string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *GatewayPayload) Reset() {
	*x = GatewayPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayPayload) ProtoMessage() {}

func (x *GatewayPayload) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayPayload.ProtoReflect.Descriptor instead.
func (*GatewayPayload) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{29}
}

func (x *GatewayPayload) GetOp() int64 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *GatewayPayload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GatewayPayload) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *GatewayPayload) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Guild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                        string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon                        string           `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	IconHash                    string           `protobuf:"bytes,4,opt,name=iconHash,proto3" json:"iconHash,omitempty"`
	Splash                      string           `protobuf:"bytes,5,opt,name=splash,proto3" json:"splash,omitempty"`
	DiscoverySplash             string           `protobuf:"bytes,6,opt,name=discoverySplash,proto3" json:"discoverySplash,omitempty"`
	Owner                       bool             `protobuf:"varint,7,opt,name=owner,proto3" json:"owner,omitempty"`
	OwnerID                     int64            `protobuf:"varint,8,opt,name=ownerID,proto3" json:"ownerID,omitempty"`
	Permissions                 int64            `protobuf:"varint,9,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Region                      string           `protobuf:"bytes,10,opt,name=region,proto3" json:"region,omitempty"`
	AfkChannelID                int64            `protobuf:"varint,11,opt,name=afkChannelID,proto3" json:"afkChannelID,omitempty"`
	AfkTimeout                  int64            `protobuf:"varint,12,opt,name=afkTimeout,proto3" json:"afkTimeout,omitempty"`
	WidgetEnabled               bool             `protobuf:"varint,13,opt,name=widgetEnabled,proto3" json:"widgetEnabled,omitempty"`
	WidgetChannelID             int64            `protobuf:"varint,14,opt,name=widgetChannelID,proto3" json:"widgetChannelID,omitempty"`
	VerificationLevel           int64            `protobuf:"varint,15,opt,name=verificationLevel,proto3" json:"verificationLevel,omitempty"`
	DefaultMessageNotifications int64            `protobuf:"varint,16,opt,name=defaultMessageNotifications,proto3" json:"defaultMessageNotifications,omitempty"`
	ExplicitContentFilter       int64            `protobuf:"varint,17,opt,name=explicitContentFilter,proto3" json:"explicitContentFilter,omitempty"`
	Roles                       []*Role          `protobuf:"bytes,18,rep,name=roles,proto3" json:"roles,omitempty"`
	Emojis                      []*Emoji         `protobuf:"bytes,19,rep,name=emojis,proto3" json:"emojis,omitempty"`
	Features                    []string         `protobuf:"bytes,20,rep,name=features,proto3" json:"features,omitempty"`
	MfaLevel                    int64            `protobuf:"varint,21,opt,name=mfaLevel,proto3" json:"mfaLevel,omitempty"`
	ApplicationID               int64            `protobuf:"varint,22,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	SystemChannelID             int64            `protobuf:"varint,23,opt,name=systemChannelID,proto3" json:"systemChannelID,omitempty"`
	SystemChannelFlags          int64            `protobuf:"varint,24,opt,name=systemChannelFlags,proto3" json:"systemChannelFlags,omitempty"`
	RulesChannelID              int64            `protobuf:"varint,25,opt,name=rulesChannelID,proto3" json:"rulesChannelID,omitempty"`
	JoinedAt                    string           `protobuf:"bytes,26,opt,name=joinedAt,proto3" json:"joinedAt,omitempty"`
	Large                       bool             `protobuf:"varint,27,opt,name=large,proto3" json:"large,omitempty"`
	Unavailable                 bool             `protobuf:"varint,28,opt,name=unavailable,proto3" json:"unavailable,omitempty"`
	MemberCount                 int64            `protobuf:"varint,29,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	VoiceStates                 []*VoiceState    `protobuf:"bytes,30,rep,name=voiceStates,proto3" json:"voiceStates,omitempty"`
	Members                     []*GuildMember   `protobuf:"bytes,31,rep,name=members,proto3" json:"members,omitempty"`
	Channels                    []*Channel       `protobuf:"bytes,32,rep,name=channels,proto3" json:"channels,omitempty"`
	Presences                   []*Activity      `protobuf:"bytes,33,rep,name=presences,proto3" json:"presences,omitempty"`
	Description                 string           `protobuf:"bytes,34,opt,name=description,proto3" json:"description,omitempty"`
	Banner                      string           `protobuf:"bytes,35,opt,name=banner,proto3" json:"banner,omitempty"`
	MaxPresences                int64            `protobuf:"varint,36,opt,name=maxPresences,proto3" json:"maxPresences,omitempty"`
	MaxMembers                  int64            `protobuf:"varint,37,opt,name=maxMembers,proto3" json:"maxMembers,omitempty"`
	VanityURLCode               string           `protobuf:"bytes,38,opt,name=vanityURLCode,proto3" json:"vanityURLCode,omitempty"`
	PremiumTier                 int64            `protobuf:"varint,39,opt,name=premiumTier,proto3" json:"premiumTier,omitempty"`
	PremiumSubscriptionCount    int64            `protobuf:"varint,40,opt,name=premiumSubscriptionCount,proto3" json:"premiumSubscriptionCount,omitempty"`
	PreferredLocale             string           `protobuf:"bytes,41,opt,name=preferredLocale,proto3" json:"preferredLocale,omitempty"`
	PublicUpdatesChannelID      int64            `protobuf:"varint,42,opt,name=publicUpdatesChannelID,proto3" json:"publicUpdatesChannelID,omitempty"`
	MaxVideoChannelUsers        int64            `protobuf:"varint,43,opt,name=maxVideoChannelUsers,proto3" json:"maxVideoChannelUsers,omitempty"`
	ApproximateMemberCount      int64            `protobuf:"varint,44,opt,name=approximateMemberCount,proto3" json:"approximateMemberCount,omitempty"`
	ApproximatePresenceCount    int64            `protobuf:"varint,45,opt,name=approximatePresenceCount,proto3" json:"approximatePresenceCount,omitempty"`
	NsfwLevel                   int64            `protobuf:"varint,46,opt,name=nsfwLevel,proto3" json:"nsfwLevel,omitempty"`
	StageInstances              []*StageInstance `protobuf:"bytes,47,rep,name=stageInstances,proto3" json:"stageInstances,omitempty"`
	Stickers                    []*Sticker       `protobuf:"bytes,48,rep,name=stickers,proto3" json:"stickers,omitempty"`
}

func (x *Guild) Reset() {
	*x = Guild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Guild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Guild) ProtoMessage() {}

func (x *Guild) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Guild.ProtoReflect.Descriptor instead.
func (*Guild) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{30}
}

func (x *Guild) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Guild) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Guild) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Guild) GetIconHash() string {
	if x != nil {
		return x.IconHash
	}
	return ""
}

func (x *Guild) GetSplash() string {
	if x != nil {
		return x.Splash
	}
	return ""
}

func (x *Guild) GetDiscoverySplash() string {
	if x != nil {
		return x.DiscoverySplash
	}
	return ""
}

func (x *Guild) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

func (x *Guild) GetOwnerID() int64 {
	if x != nil {
		return x.OwnerID
	}
	return 0
}

func (x *Guild) GetPermissions() int64 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

func (x *Guild) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Guild) GetAfkChannelID() int64 {
	if x != nil {
		return x.AfkChannelID
	}
	return 0
}

func (x *Guild) GetAfkTimeout() int64 {
	if x != nil {
		return x.AfkTimeout
	}
	return 0
}

func (x *Guild) GetWidgetEnabled() bool {
	if x != nil {
		return x.WidgetEnabled
	}
	return false
}

func (x *Guild) GetWidgetChannelID() int64 {
	if x != nil {
		return x.WidgetChannelID
	}
	return 0
}

func (x *Guild) GetVerificationLevel() int64 {
	if x != nil {
		return x.VerificationLevel
	}
	return 0
}

func (x *Guild) GetDefaultMessageNotifications() int64 {
	if x != nil {
		return x.DefaultMessageNotifications
	}
	return 0
}

func (x *Guild) GetExplicitContentFilter() int64 {
	if x != nil {
		return x.ExplicitContentFilter
	}
	return 0
}

func (x *Guild) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *Guild) GetEmojis() []*Emoji {
	if x != nil {
		return x.Emojis
	}
	return nil
}

func (x *Guild) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Guild) GetMfaLevel() int64 {
	if x != nil {
		return x.MfaLevel
	}
	return 0
}

func (x *Guild) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *Guild) GetSystemChannelID() int64 {
	if x != nil {
		return x.SystemChannelID
	}
	return 0
}

func (x *Guild) GetSystemChannelFlags() int64 {
	if x != nil {
		return x.SystemChannelFlags
	}
	return 0
}

func (x *Guild) GetRulesChannelID() int64 {
	if x != nil {
		return x.RulesChannelID
	}
	return 0
}

func (x *Guild) GetJoinedAt() string {
	if x != nil {
		return x.JoinedAt
	}
	return ""
}

func (x *Guild) GetLarge() bool {
	if x != nil {
		return x.Large
	}
	return false
}

func (x *Guild) GetUnavailable() bool {
	if x != nil {
		return x.Unavailable
	}
	return false
}

func (x *Guild) GetMemberCount() int64 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *Guild) GetVoiceStates() []*VoiceState {
	if x != nil {
		return x.VoiceStates
	}
	return nil
}

func (x *Guild) GetMembers() []*GuildMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Guild) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *Guild) GetPresences() []*Activity {
	if x != nil {
		return x.Presences
	}
	return nil
}

func (x *Guild) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Guild) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *Guild) GetMaxPresences() int64 {
	if x != nil {
		return x.MaxPresences
	}
	return 0
}

func (x *Guild) GetMaxMembers() int64 {
	if x != nil {
		return x.MaxMembers
	}
	return 0
}

func (x *Guild) GetVanityURLCode() string {
	if x != nil {
		return x.VanityURLCode
	}
	return ""
}

func (x *Guild) GetPremiumTier() int64 {
	if x != nil {
		return x.PremiumTier
	}
	return 0
}

func (x *Guild) GetPremiumSubscriptionCount() int64 {
	if x != nil {
		return x.PremiumSubscriptionCount
	}
	return 0
}

func (x *Guild) GetPreferredLocale() string {
	if x != nil {
		return x.PreferredLocale
	}
	return ""
}

func (x *Guild) GetPublicUpdatesChannelID() int64 {
	if x != nil {
		return x.PublicUpdatesChannelID
	}
	return 0
}

func (x *Guild) GetMaxVideoChannelUsers() int64 {
	if x != nil {
		return x.MaxVideoChannelUsers
	}
	return 0
}

func (x *Guild) GetApproximateMemberCount() int64 {
	if x != nil {
		return x.ApproximateMemberCount
	}
	return 0
}

func (x *Guild) GetApproximatePresenceCount() int64 {
	if x != nil {
		return x.ApproximatePresenceCount
	}
	return 0
}

func (x *Guild) GetNsfwLevel() int64 {
	if x != nil {
		return x.NsfwLevel
	}
	return 0
}

func (x *Guild) GetStageInstances() []*StageInstance {
	if x != nil {
		return x.StageInstances
	}
	return nil
}

func (x *Guild) GetStickers() []*Sticker {
	if x != nil {
		return x.Stickers
	}
	return nil
}

type GuildBanAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID int64 `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	User    *User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GuildBanAdd) Reset() {
	*x = GuildBanAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBanAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBanAdd) ProtoMessage() {}

func (x *GuildBanAdd) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBanAdd.ProtoReflect.Descriptor instead.
func (*GuildBanAdd) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{31}
}

func (x *GuildBanAdd) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *GuildBanAdd) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type GuildBanRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID int64 `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	User    *User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GuildBanRemove) Reset() {
	*x = GuildBanRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildBanRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildBanRemove) ProtoMessage() {}

func (x *GuildBanRemove) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildBanRemove.ProtoReflect.Descriptor instead.
func (*GuildBanRemove) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{32}
}

func (x *GuildBanRemove) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *GuildBanRemove) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type GuildCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guild *Guild `protobuf:"bytes,1,opt,name=guild,proto3" json:"guild,omitempty"`
	Lazy  bool   `protobuf:"varint,2,opt,name=lazy,proto3" json:"lazy,omitempty"`
}

func (x *GuildCreate) Reset() {
	*x = GuildCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildCreate) ProtoMessage() {}

func (x *GuildCreate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildCreate.ProtoReflect.Descriptor instead.
func (*GuildCreate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{33}
}

func (x *GuildCreate) GetGuild() *Guild {
	if x != nil {
		return x.Guild
	}
	return nil
}

func (x *GuildCreate) GetLazy() bool {
	if x != nil {
		return x.Lazy
	}
	return false
}

type GuildEmojisUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID int64    `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Emojis  []*Emoji `protobuf:"bytes,2,rep,name=emojis,proto3" json:"emojis,omitempty"`
}

func (x *GuildEmojisUpdate) Reset() {
	*x = GuildEmojisUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildEmojisUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildEmojisUpdate) ProtoMessage() {}

func (x *GuildEmojisUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildEmojisUpdate.ProtoReflect.Descriptor instead.
func (*GuildEmojisUpdate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{34}
}

func (x *GuildEmojisUpdate) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *GuildEmojisUpdate) GetEmojis() []*Emoji {
	if x != nil {
		return x.Emojis
	}
	return nil
}

type GuildIntegrationsUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID int64 `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
}

func (x *GuildIntegrationsUpdate) Reset() {
	*x = GuildIntegrationsUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildIntegrationsUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildIntegrationsUpdate) ProtoMessage() {}

func (x *GuildIntegrationsUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildIntegrationsUpdate.ProtoReflect.Descriptor instead.
func (*GuildIntegrationsUpdate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{35}
}

func (x *GuildIntegrationsUpdate) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

type GuildJoinRequestDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  int64 `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	GuildID int64 `protobuf:"varint,2,opt,name=guildID,proto3" json:"guildID,omitempty"`
}

func (x *GuildJoinRequestDelete) Reset() {
	*x = GuildJoinRequestDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildJoinRequestDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildJoinRequestDelete) ProtoMessage() {}

func (x *GuildJoinRequestDelete) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildJoinRequestDelete.ProtoReflect.Descriptor instead.
func (*GuildJoinRequestDelete) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{36}
}

func (x *GuildJoinRequestDelete) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *GuildJoinRequestDelete) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

type GuildMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User         *User   `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Nick         string  `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Roles        []int64 `protobuf:"varint,3,rep,packed,name=roles,proto3" json:"roles,omitempty"`
	JoinedAt     string  `protobuf:"bytes,4,opt,name=joinedAt,proto3" json:"joinedAt,omitempty"`
	PremiumSince string  `protobuf:"bytes,5,opt,name=premiumSince,proto3" json:"premiumSince,omitempty"`
	Deaf         bool    `protobuf:"varint,6,opt,name=deaf,proto3" json:"deaf,omitempty"`
	Mute         bool    `protobuf:"varint,7,opt,name=mute,proto3" json:"mute,omitempty"`
	Pending      bool    `protobuf:"varint,8,opt,name=pending,proto3" json:"pending,omitempty"`
	Permissions  string  `protobuf:"bytes,9,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *GuildMember) Reset() {
	*x = GuildMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMember) ProtoMessage() {}

func (x *GuildMember) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMember.ProtoReflect.Descriptor instead.
func (*GuildMember) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{37}
}

func (x *GuildMember) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GuildMember) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *GuildMember) GetRoles() []int64 {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *GuildMember) GetJoinedAt() string {
	if x != nil {
		return x.JoinedAt
	}
	return ""
}

func (x *GuildMember) GetPremiumSince() string {
	if x != nil {
		return x.PremiumSince
	}
	return ""
}

func (x *GuildMember) GetDeaf() bool {
	if x != nil {
		return x.Deaf
	}
	return false
}

func (x *GuildMember) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *GuildMember) GetPending() bool {
	if x != nil {
		return x.Pending
	}
	return false
}

func (x *GuildMember) GetPermissions() string {
	if x != nil {
		return x.Permissions
	}
	return ""
}

type GuildMemberAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildMember *GuildMember `protobuf:"bytes,1,opt,name=guildMember,proto3" json:"guildMember,omitempty"`
	GuildID     int64        `protobuf:"varint,2,opt,name=guildID,proto3" json:"guildID,omitempty"`
}

func (x *GuildMemberAdd) Reset() {
	*x = GuildMemberAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMemberAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMemberAdd) ProtoMessage() {}

func (x *GuildMemberAdd) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMemberAdd.ProtoReflect.Descriptor instead.
func (*GuildMemberAdd) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{38}
}

func (x *GuildMemberAdd) GetGuildMember() *GuildMember {
	if x != nil {
		return x.GuildMember
	}
	return nil
}

func (x *GuildMemberAdd) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

type GuildMemberRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID int64 `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	User    *User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GuildMemberRemove) Reset() {
	*x = GuildMemberRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMemberRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMemberRemove) ProtoMessage() {}

func (x *GuildMemberRemove) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMemberRemove.ProtoReflect.Descriptor instead.
func (*GuildMemberRemove) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{39}
}

func (x *GuildMemberRemove) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *GuildMemberRemove) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type GuildMemberUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildMember *GuildMember `protobuf:"bytes,1,opt,name=guildMember,proto3" json:"guildMember,omitempty"`
	GuildID     int64        `protobuf:"varint,2,opt,name=guildID,proto3" json:"guildID,omitempty"`
}

func (x *GuildMemberUpdate) Reset() {
	*x = GuildMemberUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMemberUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMemberUpdate) ProtoMessage() {}

func (x *GuildMemberUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMemberUpdate.ProtoReflect.Descriptor instead.
func (*GuildMemberUpdate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{40}
}

func (x *GuildMemberUpdate) GetGuildMember() *GuildMember {
	if x != nil {
		return x.GuildMember
	}
	return nil
}

func (x *GuildMemberUpdate) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

type GuildMembersChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID    int64          `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Members    []*GuildMember `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	ChunkIndex int64          `protobuf:"varint,3,opt,name=chunkIndex,proto3" json:"chunkIndex,omitempty"`
	ChunkCount int64          `protobuf:"varint,4,opt,name=chunkCount,proto3" json:"chunkCount,omitempty"`
	NotFound   []int64        `protobuf:"varint,5,rep,packed,name=notFound,proto3" json:"notFound,omitempty"`
	Presences  []string       `protobuf:"bytes,6,rep,name=presences,proto3" json:"presences,omitempty"`
	Nonce      string         `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *GuildMembersChunk) Reset() {
	*x = GuildMembersChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildMembersChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildMembersChunk) ProtoMessage() {}

func (x *GuildMembersChunk) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildMembersChunk.ProtoReflect.Descriptor instead.
func (*GuildMembersChunk) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{41}
}

func (x *GuildMembersChunk) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *GuildMembersChunk) GetMembers() []*GuildMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GuildMembersChunk) GetChunkIndex() int64 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *GuildMembersChunk) GetChunkCount() int64 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

func (x *GuildMembersChunk) GetNotFound() []int64 {
	if x != nil {
		return x.NotFound
	}
	return nil
}

func (x *GuildMembersChunk) GetPresences() []string {
	if x != nil {
		return x.Presences
	}
	return nil
}

func (x *GuildMembersChunk) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type GuildRoleCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID int64 `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Role    *Role `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *GuildRoleCreate) Reset() {
	*x = GuildRoleCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildRoleCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildRoleCreate) ProtoMessage() {}

func (x *GuildRoleCreate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildRoleCreate.ProtoReflect.Descriptor instead.
func (*GuildRoleCreate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{42}
}

func (x *GuildRoleCreate) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *GuildRoleCreate) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

type GuildRoleDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID int64 `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	RoleID  int64 `protobuf:"varint,2,opt,name=roleID,proto3" json:"roleID,omitempty"`
}

func (x *GuildRoleDelete) Reset() {
	*x = GuildRoleDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildRoleDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildRoleDelete) ProtoMessage() {}

func (x *GuildRoleDelete) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildRoleDelete.ProtoReflect.Descriptor instead.
func (*GuildRoleDelete) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{43}
}

func (x *GuildRoleDelete) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *GuildRoleDelete) GetRoleID() int64 {
	if x != nil {
		return x.RoleID
	}
	return 0
}

type GuildRoleUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID int64 `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Role    *Role `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *GuildRoleUpdate) Reset() {
	*x = GuildRoleUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildRoleUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildRoleUpdate) ProtoMessage() {}

func (x *GuildRoleUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildRoleUpdate.ProtoReflect.Descriptor instead.
func (*GuildRoleUpdate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{44}
}

func (x *GuildRoleUpdate) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *GuildRoleUpdate) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

type GuildStickersUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID  int64      `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Stickers []*Sticker `protobuf:"bytes,2,rep,name=stickers,proto3" json:"stickers,omitempty"`
}

func (x *GuildStickersUpdate) Reset() {
	*x = GuildStickersUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuildStickersUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuildStickersUpdate) ProtoMessage() {}

func (x *GuildStickersUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuildStickersUpdate.ProtoReflect.Descriptor instead.
func (*GuildStickersUpdate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{45}
}

func (x *GuildStickersUpdate) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *GuildStickersUpdate) GetStickers() []*Sticker {
	if x != nil {
		return x.Stickers
	}
	return nil
}

type Hello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeartbeatInterval int64 `protobuf:"varint,1,opt,name=heartbeatInterval,proto3" json:"heartbeatInterval,omitempty"`
}

func (x *Hello) Reset() {
	*x = Hello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hello) ProtoMessage() {}

func (x *Hello) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hello.ProtoReflect.Descriptor instead.
func (*Hello) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{46}
}

func (x *Hello) GetHeartbeatInterval() int64 {
	if x != nil {
		return x.HeartbeatInterval
	}
	return 0
}

type Identify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token          string              `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Properties     *IdentifyProperties `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	Compress       bool                `protobuf:"varint,3,opt,name=compress,proto3" json:"compress,omitempty"`
	LargeThreshold int64               `protobuf:"varint,4,opt,name=largeThreshold,proto3" json:"largeThreshold,omitempty"`
	Shard          []int64             `protobuf:"varint,5,rep,packed,name=shard,proto3" json:"shard,omitempty"`
	Presence       *UpdateStatus       `protobuf:"bytes,6,opt,name=presence,proto3" json:"presence,omitempty"`
	Intents        int64               `protobuf:"varint,7,opt,name=intents,proto3" json:"intents,omitempty"`
}

func (x *Identify) Reset() {
	*x = Identify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identify) ProtoMessage() {}

func (x *Identify) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identify.ProtoReflect.Descriptor instead.
func (*Identify) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{47}
}

func (x *Identify) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Identify) GetProperties() *IdentifyProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Identify) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *Identify) GetLargeThreshold() int64 {
	if x != nil {
		return x.LargeThreshold
	}
	return 0
}

func (x *Identify) GetShard() []int64 {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *Identify) GetPresence() *UpdateStatus {
	if x != nil {
		return x.Presence
	}
	return nil
}

func (x *Identify) GetIntents() int64 {
	if x != nil {
		return x.Intents
	}
	return 0
}

type IdentifyProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Os      string `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty"`
	Browser string `protobuf:"bytes,2,opt,name=browser,proto3" json:"browser,omitempty"`
	Device  string `protobuf:"bytes,3,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *IdentifyProperties) Reset() {
	*x = IdentifyProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifyProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifyProperties) ProtoMessage() {}

func (x *IdentifyProperties) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifyProperties.ProtoReflect.Descriptor instead.
func (*IdentifyProperties) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{48}
}

func (x *IdentifyProperties) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *IdentifyProperties) GetBrowser() string {
	if x != nil {
		return x.Browser
	}
	return ""
}

func (x *IdentifyProperties) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

type Integration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type              int64               `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Enabled           bool                `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Syncing           bool                `protobuf:"varint,5,opt,name=syncing,proto3" json:"syncing,omitempty"`
	RoleID            int64               `protobuf:"varint,6,opt,name=roleID,proto3" json:"roleID,omitempty"`
	EnableEmoticons   bool                `protobuf:"varint,7,opt,name=enableEmoticons,proto3" json:"enableEmoticons,omitempty"`
	ExpireBehavior    int64               `protobuf:"varint,8,opt,name=expireBehavior,proto3" json:"expireBehavior,omitempty"`
	ExpireGracePeriod int64               `protobuf:"varint,9,opt,name=expireGracePeriod,proto3" json:"expireGracePeriod,omitempty"`
	User              *User               `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	Account           *IntegrationAccount `protobuf:"bytes,11,opt,name=account,proto3" json:"account,omitempty"`
	SyncedAt          string              `protobuf:"bytes,12,opt,name=syncedAt,proto3" json:"syncedAt,omitempty"`
	SubscriberCount   int64               `protobuf:"varint,13,opt,name=subscriberCount,proto3" json:"subscriberCount,omitempty"`
	Revoked           bool                `protobuf:"varint,14,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Application       *Application        `protobuf:"bytes,15,opt,name=application,proto3" json:"application,omitempty"`
}

func (x *Integration) Reset() {
	*x = Integration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integration) ProtoMessage() {}

func (x *Integration) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integration.ProtoReflect.Descriptor instead.
func (*Integration) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{49}
}

func (x *Integration) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Integration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Integration) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Integration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Integration) GetSyncing() bool {
	if x != nil {
		return x.Syncing
	}
	return false
}

func (x *Integration) GetRoleID() int64 {
	if x != nil {
		return x.RoleID
	}
	return 0
}

func (x *Integration) GetEnableEmoticons() bool {
	if x != nil {
		return x.EnableEmoticons
	}
	return false
}

func (x *Integration) GetExpireBehavior() int64 {
	if x != nil {
		return x.ExpireBehavior
	}
	return 0
}

func (x *Integration) GetExpireGracePeriod() int64 {
	if x != nil {
		return x.ExpireGracePeriod
	}
	return 0
}

func (x *Integration) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Integration) GetAccount() *IntegrationAccount {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Integration) GetSyncedAt() string {
	if x != nil {
		return x.SyncedAt
	}
	return ""
}

func (x *Integration) GetSubscriberCount() int64 {
	if x != nil {
		return x.SubscriberCount
	}
	return 0
}

func (x *Integration) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *Integration) GetApplication() *Application {
	if x != nil {
		return x.Application
	}
	return nil
}

type IntegrationAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *IntegrationAccount) Reset() {
	*x = IntegrationAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationAccount) ProtoMessage() {}

func (x *IntegrationAccount) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationAccount.ProtoReflect.Descriptor instead.
func (*IntegrationAccount) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{50}
}

func (x *IntegrationAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IntegrationAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type IntegrationCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Integration *Integration `protobuf:"bytes,1,opt,name=integration,proto3" json:"integration,omitempty"`
	GuildID     int64        `protobuf:"varint,2,opt,name=guildID,proto3" json:"guildID,omitempty"`
}

func (x *IntegrationCreate) Reset() {
	*x = IntegrationCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationCreate) ProtoMessage() {}

func (x *IntegrationCreate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationCreate.ProtoReflect.Descriptor instead.
func (*IntegrationCreate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{51}
}

func (x *IntegrationCreate) GetIntegration() *Integration {
	if x != nil {
		return x.Integration
	}
	return nil
}

func (x *IntegrationCreate) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

type IntegrationDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildID       int64 `protobuf:"varint,2,opt,name=guildID,proto3" json:"guildID,omitempty"`
	ApplicationID int64 `protobuf:"varint,3,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
}

func (x *IntegrationDelete) Reset() {
	*x = IntegrationDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationDelete) ProtoMessage() {}

func (x *IntegrationDelete) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationDelete.ProtoReflect.Descriptor instead.
func (*IntegrationDelete) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{52}
}

func (x *IntegrationDelete) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IntegrationDelete) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *IntegrationDelete) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

type IntegrationUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Integration *Integration `protobuf:"bytes,1,opt,name=integration,proto3" json:"integration,omitempty"`
	GuildID     int64        `protobuf:"varint,2,opt,name=guildID,proto3" json:"guildID,omitempty"`
}

func (x *IntegrationUpdate) Reset() {
	*x = IntegrationUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationUpdate) ProtoMessage() {}

func (x *IntegrationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationUpdate.ProtoReflect.Descriptor instead.
func (*IntegrationUpdate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{53}
}

func (x *IntegrationUpdate) GetIntegration() *Integration {
	if x != nil {
		return x.Integration
	}
	return nil
}

func (x *IntegrationUpdate) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

type Interaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplicationID int64            `protobuf:"varint,2,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
	Type          int64            `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Data          *InteractionData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	GuildID       int64            `protobuf:"varint,5,opt,name=guildID,proto3" json:"guildID,omitempty"`
	ChannelID     int64            `protobuf:"varint,6,opt,name=channelID,proto3" json:"channelID,omitempty"`
	Member        *GuildMember     `protobuf:"bytes,7,opt,name=member,proto3" json:"member,omitempty"`
	User          *User            `protobuf:"bytes,8,opt,name=user,proto3" json:"user,omitempty"`
	Token         string           `protobuf:"bytes,9,opt,name=token,proto3" json:"token,omitempty"`
	Version       int64            `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	Message       *Message         `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Interaction) Reset() {
	*x = Interaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interaction) ProtoMessage() {}

func (x *Interaction) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interaction.ProtoReflect.Descriptor instead.
func (*Interaction) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{54}
}

func (x *Interaction) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Interaction) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

func (x *Interaction) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Interaction) GetData() *InteractionData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Interaction) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *Interaction) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *Interaction) GetMember() *GuildMember {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Interaction) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Interaction) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Interaction) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Interaction) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type InteractionComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        int64                      `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	CustomID    string                     `protobuf:"bytes,2,opt,name=customID,proto3" json:"customID,omitempty"`
	Disabled    bool                       `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Style       int64                      `protobuf:"varint,4,opt,name=style,proto3" json:"style,omitempty"`
	Label       string                     `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
	Emoji       *Emoji                     `protobuf:"bytes,6,opt,name=emoji,proto3" json:"emoji,omitempty"`
	Url         string                     `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	Options     []*ApplicationSelectOption `protobuf:"bytes,8,rep,name=options,proto3" json:"options,omitempty"`
	Placeholder string                     `protobuf:"bytes,9,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	MinValues   int64                      `protobuf:"varint,10,opt,name=minValues,proto3" json:"minValues,omitempty"`
	MaxValues   int64                      `protobuf:"varint,11,opt,name=maxValues,proto3" json:"maxValues,omitempty"`
	Components  []*InteractionComponent    `protobuf:"bytes,12,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *InteractionComponent) Reset() {
	*x = InteractionComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionComponent) ProtoMessage() {}

func (x *InteractionComponent) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionComponent.ProtoReflect.Descriptor instead.
func (*InteractionComponent) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{55}
}

func (x *InteractionComponent) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *InteractionComponent) GetCustomID() string {
	if x != nil {
		return x.CustomID
	}
	return ""
}

func (x *InteractionComponent) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *InteractionComponent) GetStyle() int64 {
	if x != nil {
		return x.Style
	}
	return 0
}

func (x *InteractionComponent) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *InteractionComponent) GetEmoji() *Emoji {
	if x != nil {
		return x.Emoji
	}
	return nil
}

func (x *InteractionComponent) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *InteractionComponent) GetOptions() []*ApplicationSelectOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *InteractionComponent) GetPlaceholder() string {
	if x != nil {
		return x.Placeholder
	}
	return ""
}

func (x *InteractionComponent) GetMinValues() int64 {
	if x != nil {
		return x.MinValues
	}
	return 0
}

func (x *InteractionComponent) GetMaxValues() int64 {
	if x != nil {
		return x.MaxValues
	}
	return 0
}

func (x *InteractionComponent) GetComponents() []*InteractionComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

type InteractionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          int64                      `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Resolved      *InteractionResolvedData   `protobuf:"bytes,4,opt,name=resolved,proto3" json:"resolved,omitempty"`
	Options       []*InteractionDataOption   `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
	CustomID      string                     `protobuf:"bytes,6,opt,name=customID,proto3" json:"customID,omitempty"`
	ComponentType int64                      `protobuf:"varint,7,opt,name=componentType,proto3" json:"componentType,omitempty"`
	Values        []*ApplicationSelectOption `protobuf:"bytes,8,rep,name=values,proto3" json:"values,omitempty"`
	TargetID      int64                      `protobuf:"varint,9,opt,name=targetID,proto3" json:"targetID,omitempty"`
}

func (x *InteractionData) Reset() {
	*x = InteractionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionData) ProtoMessage() {}

func (x *InteractionData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionData.ProtoReflect.Descriptor instead.
func (*InteractionData) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{56}
}

func (x *InteractionData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InteractionData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InteractionData) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *InteractionData) GetResolved() *InteractionResolvedData {
	if x != nil {
		return x.Resolved
	}
	return nil
}

func (x *InteractionData) GetOptions() []*InteractionDataOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *InteractionData) GetCustomID() string {
	if x != nil {
		return x.CustomID
	}
	return ""
}

func (x *InteractionData) GetComponentType() int64 {
	if x != nil {
		return x.ComponentType
	}
	return 0
}

func (x *InteractionData) GetValues() []*ApplicationSelectOption {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *InteractionData) GetTargetID() int64 {
	if x != nil {
		return x.TargetID
	}
	return 0
}

type InteractionDataOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type    int64                    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Value   []byte                   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Options []*InteractionDataOption `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *InteractionDataOption) Reset() {
	*x = InteractionDataOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionDataOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionDataOption) ProtoMessage() {}

func (x *InteractionDataOption) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionDataOption.ProtoReflect.Descriptor instead.
func (*InteractionDataOption) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{57}
}

func (x *InteractionDataOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InteractionDataOption) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *InteractionDataOption) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *InteractionDataOption) GetOptions() []*InteractionDataOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type InteractionResolvedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users    []*User        `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Members  []*GuildMember `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	Roles    []*Role        `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	Channels []*Channel     `protobuf:"bytes,4,rep,name=channels,proto3" json:"channels,omitempty"`
	Messages []*Message     `protobuf:"bytes,5,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *InteractionResolvedData) Reset() {
	*x = InteractionResolvedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionResolvedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionResolvedData) ProtoMessage() {}

func (x *InteractionResolvedData) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionResolvedData.ProtoReflect.Descriptor instead.
func (*InteractionResolvedData) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{58}
}

func (x *InteractionResolvedData) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *InteractionResolvedData) GetMembers() []*GuildMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *InteractionResolvedData) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *InteractionResolvedData) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *InteractionResolvedData) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type InvalidSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resumable bool `protobuf:"varint,1,opt,name=resumable,proto3" json:"resumable,omitempty"`
}

func (x *InvalidSession) Reset() {
	*x = InvalidSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidSession) ProtoMessage() {}

func (x *InvalidSession) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidSession.ProtoReflect.Descriptor instead.
func (*InvalidSession) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{59}
}

func (x *InvalidSession) GetResumable() bool {
	if x != nil {
		return x.Resumable
	}
	return false
}

type InviteCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID         int64        `protobuf:"varint,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	Code              string       `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	CreatedAt         string       `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	GuildID           int64        `protobuf:"varint,4,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Inviter           *User        `protobuf:"bytes,5,opt,name=inviter,proto3" json:"inviter,omitempty"`
	MaxAge            int64        `protobuf:"varint,6,opt,name=maxAge,proto3" json:"maxAge,omitempty"`
	MaxUses           int64        `protobuf:"varint,7,opt,name=maxUses,proto3" json:"maxUses,omitempty"`
	TargetType        int64        `protobuf:"varint,8,opt,name=targetType,proto3" json:"targetType,omitempty"`
	TargetUser        *User        `protobuf:"bytes,9,opt,name=targetUser,proto3" json:"targetUser,omitempty"`
	TargetApplication *Application `protobuf:"bytes,10,opt,name=targetApplication,proto3" json:"targetApplication,omitempty"`
	Temporary         bool         `protobuf:"varint,11,opt,name=temporary,proto3" json:"temporary,omitempty"`
	Uses              int64        `protobuf:"varint,12,opt,name=uses,proto3" json:"uses,omitempty"`
}

func (x *InviteCreate) Reset() {
	*x = InviteCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteCreate) ProtoMessage() {}

func (x *InviteCreate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteCreate.ProtoReflect.Descriptor instead.
func (*InviteCreate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{60}
}

func (x *InviteCreate) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *InviteCreate) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *InviteCreate) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *InviteCreate) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *InviteCreate) GetInviter() *User {
	if x != nil {
		return x.Inviter
	}
	return nil
}

func (x *InviteCreate) GetMaxAge() int64 {
	if x != nil {
		return x.MaxAge
	}
	return 0
}

func (x *InviteCreate) GetMaxUses() int64 {
	if x != nil {
		return x.MaxUses
	}
	return 0
}

func (x *InviteCreate) GetTargetType() int64 {
	if x != nil {
		return x.TargetType
	}
	return 0
}

func (x *InviteCreate) GetTargetUser() *User {
	if x != nil {
		return x.TargetUser
	}
	return nil
}

func (x *InviteCreate) GetTargetApplication() *Application {
	if x != nil {
		return x.TargetApplication
	}
	return nil
}

func (x *InviteCreate) GetTemporary() bool {
	if x != nil {
		return x.Temporary
	}
	return false
}

func (x *InviteCreate) GetUses() int64 {
	if x != nil {
		return x.Uses
	}
	return 0
}

type InviteDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID int64  `protobuf:"varint,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	GuildID   int64  `protobuf:"varint,2,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Code      string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *InviteDelete) Reset() {
	*x = InviteDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteDelete) ProtoMessage() {}

func (x *InviteDelete) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteDelete.ProtoReflect.Descriptor instead.
func (*InviteDelete) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{61}
}

func (x *InviteDelete) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *InviteDelete) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *InviteDelete) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelID         int64                    `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
	GuildID           int64                    `protobuf:"varint,3,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Author            *User                    `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	Member            *GuildMember             `protobuf:"bytes,5,opt,name=member,proto3" json:"member,omitempty"`
	Content           string                   `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Timestamp         string                   `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	EditedTimestamp   string                   `protobuf:"bytes,8,opt,name=editedTimestamp,proto3" json:"editedTimestamp,omitempty"`
	TTS               bool                     `protobuf:"varint,9,opt,name=TTS,proto3" json:"TTS,omitempty"`
	MentionEveryone   bool                     `protobuf:"varint,10,opt,name=mentionEveryone,proto3" json:"mentionEveryone,omitempty"`
	Mentions          []*User                  `protobuf:"bytes,11,rep,name=mentions,proto3" json:"mentions,omitempty"`
	MentionRoles      []int64                  `protobuf:"varint,12,rep,packed,name=mentionRoles,proto3" json:"mentionRoles,omitempty"`
	MentionChannels   []*MessageChannelMention `protobuf:"bytes,13,rep,name=mentionChannels,proto3" json:"mentionChannels,omitempty"`
	Attachments       []*MessageAttachment     `protobuf:"bytes,14,rep,name=attachments,proto3" json:"attachments,omitempty"`
	Embeds            []*Embed                 `protobuf:"bytes,15,rep,name=embeds,proto3" json:"embeds,omitempty"`
	Reactions         []*MessageReaction       `protobuf:"bytes,16,rep,name=reactions,proto3" json:"reactions,omitempty"`
	Nonce             int64                    `protobuf:"varint,17,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Pinned            bool                     `protobuf:"varint,18,opt,name=pinned,proto3" json:"pinned,omitempty"`
	WebhookID         int64                    `protobuf:"varint,19,opt,name=webhookID,proto3" json:"webhookID,omitempty"`
	Type              int64                    `protobuf:"varint,20,opt,name=type,proto3" json:"type,omitempty"`
	Activity          *MessageActivity         `protobuf:"bytes,21,opt,name=activity,proto3" json:"activity,omitempty"`
	Application       *Application             `protobuf:"bytes,22,opt,name=application,proto3" json:"application,omitempty"`
	MessageReference  []*MessageReference      `protobuf:"bytes,23,rep,name=messageReference,proto3" json:"messageReference,omitempty"`
	Flags             int64                    `protobuf:"varint,24,opt,name=flags,proto3" json:"flags,omitempty"`
	Components        []*InteractionComponent  `protobuf:"bytes,25,rep,name=components,proto3" json:"components,omitempty"`
	Stickers          []*Sticker               `protobuf:"bytes,26,rep,name=stickers,proto3" json:"stickers,omitempty"`
	ReferencedMessage *Message                 `protobuf:"bytes,27,opt,name=referencedMessage,proto3" json:"referencedMessage,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{62}
}

func (x *Message) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Message) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *Message) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *Message) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Message) GetMember() *GuildMember {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Message) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Message) GetEditedTimestamp() string {
	if x != nil {
		return x.EditedTimestamp
	}
	return ""
}

func (x *Message) GetTTS() bool {
	if x != nil {
		return x.TTS
	}
	return false
}

func (x *Message) GetMentionEveryone() bool {
	if x != nil {
		return x.MentionEveryone
	}
	return false
}

func (x *Message) GetMentions() []*User {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *Message) GetMentionRoles() []int64 {
	if x != nil {
		return x.MentionRoles
	}
	return nil
}

func (x *Message) GetMentionChannels() []*MessageChannelMention {
	if x != nil {
		return x.MentionChannels
	}
	return nil
}

func (x *Message) GetAttachments() []*MessageAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *Message) GetEmbeds() []*Embed {
	if x != nil {
		return x.Embeds
	}
	return nil
}

func (x *Message) GetReactions() []*MessageReaction {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *Message) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Message) GetPinned() bool {
	if x != nil {
		return x.Pinned
	}
	return false
}

func (x *Message) GetWebhookID() int64 {
	if x != nil {
		return x.WebhookID
	}
	return 0
}

func (x *Message) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Message) GetActivity() *MessageActivity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *Message) GetApplication() *Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *Message) GetMessageReference() []*MessageReference {
	if x != nil {
		return x.MessageReference
	}
	return nil
}

func (x *Message) GetFlags() int64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *Message) GetComponents() []*InteractionComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Message) GetStickers() []*Sticker {
	if x != nil {
		return x.Stickers
	}
	return nil
}

func (x *Message) GetReferencedMessage() *Message {
	if x != nil {
		return x.ReferencedMessage
	}
	return nil
}

type MessageActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    int64  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	PartyID string `protobuf:"bytes,2,opt,name=partyID,proto3" json:"partyID,omitempty"`
}

func (x *MessageActivity) Reset() {
	*x = MessageActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageActivity) ProtoMessage() {}

func (x *MessageActivity) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageActivity.ProtoReflect.Descriptor instead.
func (*MessageActivity) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{63}
}

func (x *MessageActivity) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MessageActivity) GetPartyID() string {
	if x != nil {
		return x.PartyID
	}
	return ""
}

type MessageAllowedMentions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parse       []string `protobuf:"bytes,1,rep,name=parse,proto3" json:"parse,omitempty"`
	Roles       []int64  `protobuf:"varint,2,rep,packed,name=roles,proto3" json:"roles,omitempty"`
	Users       []int64  `protobuf:"varint,3,rep,packed,name=users,proto3" json:"users,omitempty"`
	RepliedUser bool     `protobuf:"varint,4,opt,name=repliedUser,proto3" json:"repliedUser,omitempty"`
}

func (x *MessageAllowedMentions) Reset() {
	*x = MessageAllowedMentions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageAllowedMentions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAllowedMentions) ProtoMessage() {}

func (x *MessageAllowedMentions) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAllowedMentions.ProtoReflect.Descriptor instead.
func (*MessageAllowedMentions) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{64}
}

func (x *MessageAllowedMentions) GetParse() []string {
	if x != nil {
		return x.Parse
	}
	return nil
}

func (x *MessageAllowedMentions) GetRoles() []int64 {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *MessageAllowedMentions) GetUsers() []int64 {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *MessageAllowedMentions) GetRepliedUser() bool {
	if x != nil {
		return x.RepliedUser
	}
	return false
}

type MessageAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Size     int64  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Url      string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	ProxyURL string `protobuf:"bytes,5,opt,name=proxyURL,proto3" json:"proxyURL,omitempty"`
	Height   int64  `protobuf:"varint,6,opt,name=height,proto3" json:"height,omitempty"`
	Width    int64  `protobuf:"varint,7,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *MessageAttachment) Reset() {
	*x = MessageAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAttachment) ProtoMessage() {}

func (x *MessageAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAttachment.ProtoReflect.Descriptor instead.
func (*MessageAttachment) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{65}
}

func (x *MessageAttachment) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageAttachment) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *MessageAttachment) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MessageAttachment) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MessageAttachment) GetProxyURL() string {
	if x != nil {
		return x.ProxyURL
	}
	return ""
}

func (x *MessageAttachment) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MessageAttachment) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

type MessageChannelMention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildID int64  `protobuf:"varint,2,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Type    int64  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Name    string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MessageChannelMention) Reset() {
	*x = MessageChannelMention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageChannelMention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageChannelMention) ProtoMessage() {}

func (x *MessageChannelMention) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageChannelMention.ProtoReflect.Descriptor instead.
func (*MessageChannelMention) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{66}
}

func (x *MessageChannelMention) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageChannelMention) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *MessageChannelMention) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MessageChannelMention) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MessageDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelID int64 `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
	GuildID   int64 `protobuf:"varint,3,opt,name=guildID,proto3" json:"guildID,omitempty"`
}

func (x *MessageDelete) Reset() {
	*x = MessageDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDelete) ProtoMessage() {}

func (x *MessageDelete) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDelete.ProtoReflect.Descriptor instead.
func (*MessageDelete) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{67}
}

func (x *MessageDelete) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageDelete) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *MessageDelete) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

type MessageDeleteBulk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	ChannelID int64   `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
	GuildID   int64   `protobuf:"varint,3,opt,name=guildID,proto3" json:"guildID,omitempty"`
}

func (x *MessageDeleteBulk) Reset() {
	*x = MessageDeleteBulk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDeleteBulk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDeleteBulk) ProtoMessage() {}

func (x *MessageDeleteBulk) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDeleteBulk.ProtoReflect.Descriptor instead.
func (*MessageDeleteBulk) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{68}
}

func (x *MessageDeleteBulk) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *MessageDeleteBulk) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *MessageDeleteBulk) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

type MessageReaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Me    bool   `protobuf:"varint,2,opt,name=me,proto3" json:"me,omitempty"`
	Emoji *Emoji `protobuf:"bytes,3,opt,name=emoji,proto3" json:"emoji,omitempty"`
}

func (x *MessageReaction) Reset() {
	*x = MessageReaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReaction) ProtoMessage() {}

func (x *MessageReaction) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReaction.ProtoReflect.Descriptor instead.
func (*MessageReaction) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{69}
}

func (x *MessageReaction) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MessageReaction) GetMe() bool {
	if x != nil {
		return x.Me
	}
	return false
}

func (x *MessageReaction) GetEmoji() *Emoji {
	if x != nil {
		return x.Emoji
	}
	return nil
}

type MessageReactionAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    int64        `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ChannelID int64        `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
	MessageID int64        `protobuf:"varint,3,opt,name=messageID,proto3" json:"messageID,omitempty"`
	GuildID   int64        `protobuf:"varint,4,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Member    *GuildMember `protobuf:"bytes,5,opt,name=member,proto3" json:"member,omitempty"`
	Emoji     *Emoji       `protobuf:"bytes,6,opt,name=emoji,proto3" json:"emoji,omitempty"`
}

func (x *MessageReactionAdd) Reset() {
	*x = MessageReactionAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReactionAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReactionAdd) ProtoMessage() {}

func (x *MessageReactionAdd) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReactionAdd.ProtoReflect.Descriptor instead.
func (*MessageReactionAdd) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{70}
}

func (x *MessageReactionAdd) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MessageReactionAdd) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *MessageReactionAdd) GetMessageID() int64 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

func (x *MessageReactionAdd) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *MessageReactionAdd) GetMember() *GuildMember {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *MessageReactionAdd) GetEmoji() *Emoji {
	if x != nil {
		return x.Emoji
	}
	return nil
}

type MessageReactionRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    int64  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ChannelID int64  `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
	MessageID int64  `protobuf:"varint,3,opt,name=messageID,proto3" json:"messageID,omitempty"`
	GuildID   int64  `protobuf:"varint,4,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Emoji     *Emoji `protobuf:"bytes,5,opt,name=emoji,proto3" json:"emoji,omitempty"`
}

func (x *MessageReactionRemove) Reset() {
	*x = MessageReactionRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReactionRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReactionRemove) ProtoMessage() {}

func (x *MessageReactionRemove) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReactionRemove.ProtoReflect.Descriptor instead.
func (*MessageReactionRemove) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{71}
}

func (x *MessageReactionRemove) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MessageReactionRemove) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *MessageReactionRemove) GetMessageID() int64 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

func (x *MessageReactionRemove) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *MessageReactionRemove) GetEmoji() *Emoji {
	if x != nil {
		return x.Emoji
	}
	return nil
}

type MessageReactionRemoveAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID int64 `protobuf:"varint,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	MessageID int64 `protobuf:"varint,2,opt,name=messageID,proto3" json:"messageID,omitempty"`
	GuildID   int64 `protobuf:"varint,3,opt,name=guildID,proto3" json:"guildID,omitempty"`
}

func (x *MessageReactionRemoveAll) Reset() {
	*x = MessageReactionRemoveAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReactionRemoveAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReactionRemoveAll) ProtoMessage() {}

func (x *MessageReactionRemoveAll) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReactionRemoveAll.ProtoReflect.Descriptor instead.
func (*MessageReactionRemoveAll) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{72}
}

func (x *MessageReactionRemoveAll) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *MessageReactionRemoveAll) GetMessageID() int64 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

func (x *MessageReactionRemoveAll) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

type MessageReactionRemoveEmoji struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID int64  `protobuf:"varint,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	GuildID   int64  `protobuf:"varint,2,opt,name=guildID,proto3" json:"guildID,omitempty"`
	MessageID int64  `protobuf:"varint,3,opt,name=messageID,proto3" json:"messageID,omitempty"`
	Emoji     *Emoji `protobuf:"bytes,4,opt,name=emoji,proto3" json:"emoji,omitempty"`
}

func (x *MessageReactionRemoveEmoji) Reset() {
	*x = MessageReactionRemoveEmoji{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReactionRemoveEmoji) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReactionRemoveEmoji) ProtoMessage() {}

func (x *MessageReactionRemoveEmoji) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReactionRemoveEmoji.ProtoReflect.Descriptor instead.
func (*MessageReactionRemoveEmoji) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{73}
}

func (x *MessageReactionRemoveEmoji) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *MessageReactionRemoveEmoji) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *MessageReactionRemoveEmoji) GetMessageID() int64 {
	if x != nil {
		return x.MessageID
	}
	return 0
}

func (x *MessageReactionRemoveEmoji) GetEmoji() *Emoji {
	if x != nil {
		return x.Emoji
	}
	return nil
}

type MessageReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelID       int64 `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
	GuildID         int64 `protobuf:"varint,3,opt,name=guildID,proto3" json:"guildID,omitempty"`
	FailIfNotExists bool  `protobuf:"varint,4,opt,name=failIfNotExists,proto3" json:"failIfNotExists,omitempty"`
}

func (x *MessageReference) Reset() {
	*x = MessageReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReference) ProtoMessage() {}

func (x *MessageReference) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReference.ProtoReflect.Descriptor instead.
func (*MessageReference) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{74}
}

func (x *MessageReference) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MessageReference) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *MessageReference) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *MessageReference) GetFailIfNotExists() bool {
	if x != nil {
		return x.FailIfNotExists
	}
	return false
}

type Party struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Size []int64 `protobuf:"varint,2,rep,packed,name=size,proto3" json:"size,omitempty"`
}

func (x *Party) Reset() {
	*x = Party{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party) ProtoMessage() {}

func (x *Party) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party.ProtoReflect.Descriptor instead.
func (*Party) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{75}
}

func (x *Party) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Party) GetSize() []int64 {
	if x != nil {
		return x.Size
	}
	return nil
}

type PresenceUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User         *User         `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	GuildID      int64         `protobuf:"varint,2,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Status       int64         `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Activities   []*Activity   `protobuf:"bytes,4,rep,name=activities,proto3" json:"activities,omitempty"`
	ClientStatus *ClientStatus `protobuf:"bytes,5,opt,name=clientStatus,proto3" json:"clientStatus,omitempty"`
}

func (x *PresenceUpdate) Reset() {
	*x = PresenceUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceUpdate) ProtoMessage() {}

func (x *PresenceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceUpdate.ProtoReflect.Descriptor instead.
func (*PresenceUpdate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{76}
}

func (x *PresenceUpdate) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *PresenceUpdate) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *PresenceUpdate) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PresenceUpdate) GetActivities() []*Activity {
	if x != nil {
		return x.Activities
	}
	return nil
}

func (x *PresenceUpdate) GetClientStatus() *ClientStatus {
	if x != nil {
		return x.ClientStatus
	}
	return nil
}

type Ready struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     int64               `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	User        *User               `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Guilds      []*UnavailableGuild `protobuf:"bytes,3,rep,name=guilds,proto3" json:"guilds,omitempty"`
	SessionID   string              `protobuf:"bytes,4,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Shard       []int64             `protobuf:"varint,5,rep,packed,name=shard,proto3" json:"shard,omitempty"`
	Application *Application        `protobuf:"bytes,6,opt,name=application,proto3" json:"application,omitempty"`
}

func (x *Ready) Reset() {
	*x = Ready{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ready) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ready) ProtoMessage() {}

func (x *Ready) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ready.ProtoReflect.Descriptor instead.
func (*Ready) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{77}
}

func (x *Ready) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Ready) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Ready) GetGuilds() []*UnavailableGuild {
	if x != nil {
		return x.Guilds
	}
	return nil
}

func (x *Ready) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Ready) GetShard() []int64 {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *Ready) GetApplication() *Application {
	if x != nil {
		return x.Application
	}
	return nil
}

type Reconnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Reconnect) Reset() {
	*x = Reconnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reconnect) ProtoMessage() {}

func (x *Reconnect) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reconnect.ProtoReflect.Descriptor instead.
func (*Reconnect) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{78}
}

type RequestGuildMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID   int64   `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Query     string  `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Limit     int64   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Presences bool    `protobuf:"varint,4,opt,name=presences,proto3" json:"presences,omitempty"`
	Nonce     string  `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	UserIDs   []int64 `protobuf:"varint,6,rep,packed,name=userIDs,proto3" json:"userIDs,omitempty"`
}

func (x *RequestGuildMembers) Reset() {
	*x = RequestGuildMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGuildMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGuildMembers) ProtoMessage() {}

func (x *RequestGuildMembers) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGuildMembers.ProtoReflect.Descriptor instead.
func (*RequestGuildMembers) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{79}
}

func (x *RequestGuildMembers) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *RequestGuildMembers) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RequestGuildMembers) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RequestGuildMembers) GetPresences() bool {
	if x != nil {
		return x.Presences
	}
	return false
}

func (x *RequestGuildMembers) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *RequestGuildMembers) GetUserIDs() []int64 {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type Resume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	SessionID string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Sequence  int64  `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *Resume) Reset() {
	*x = Resume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resume) ProtoMessage() {}

func (x *Resume) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resume.ProtoReflect.Descriptor instead.
func (*Resume) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{80}
}

func (x *Resume) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Resume) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *Resume) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type Resumed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Resumed) Reset() {
	*x = Resumed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resumed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resumed) ProtoMessage() {}

func (x *Resumed) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resumed.ProtoReflect.Descriptor instead.
func (*Resumed) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{81}
}

type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Color       int64    `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	Hoist       bool     `protobuf:"varint,4,opt,name=hoist,proto3" json:"hoist,omitempty"`
	Position    int64    `protobuf:"varint,5,opt,name=position,proto3" json:"position,omitempty"`
	Permissions int64    `protobuf:"varint,6,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Managed     bool     `protobuf:"varint,7,opt,name=managed,proto3" json:"managed,omitempty"`
	Mentionable bool     `protobuf:"varint,8,opt,name=mentionable,proto3" json:"mentionable,omitempty"`
	Tags        *RoleTag `protobuf:"bytes,9,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{82}
}

func (x *Role) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetColor() int64 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Role) GetHoist() bool {
	if x != nil {
		return x.Hoist
	}
	return false
}

func (x *Role) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Role) GetPermissions() int64 {
	if x != nil {
		return x.Permissions
	}
	return 0
}

func (x *Role) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *Role) GetMentionable() bool {
	if x != nil {
		return x.Mentionable
	}
	return false
}

func (x *Role) GetTags() *RoleTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type RoleTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PremiumSubscriber bool  `protobuf:"varint,1,opt,name=premiumSubscriber,proto3" json:"premiumSubscriber,omitempty"`
	BotID             int64 `protobuf:"varint,2,opt,name=botID,proto3" json:"botID,omitempty"`
	IntegrationID     int64 `protobuf:"varint,3,opt,name=integrationID,proto3" json:"integrationID,omitempty"`
}

func (x *RoleTag) Reset() {
	*x = RoleTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleTag) ProtoMessage() {}

func (x *RoleTag) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleTag.ProtoReflect.Descriptor instead.
func (*RoleTag) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{83}
}

func (x *RoleTag) GetPremiumSubscriber() bool {
	if x != nil {
		return x.PremiumSubscriber
	}
	return false
}

func (x *RoleTag) GetBotID() int64 {
	if x != nil {
		return x.BotID
	}
	return 0
}

func (x *RoleTag) GetIntegrationID() int64 {
	if x != nil {
		return x.IntegrationID
	}
	return 0
}

type Secrets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Join     string `protobuf:"bytes,1,opt,name=join,proto3" json:"join,omitempty"`
	Spectate string `protobuf:"bytes,2,opt,name=spectate,proto3" json:"spectate,omitempty"`
	Match    string `protobuf:"bytes,3,opt,name=match,proto3" json:"match,omitempty"`
}

func (x *Secrets) Reset() {
	*x = Secrets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secrets) ProtoMessage() {}

func (x *Secrets) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secrets.ProtoReflect.Descriptor instead.
func (*Secrets) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{84}
}

func (x *Secrets) GetJoin() string {
	if x != nil {
		return x.Join
	}
	return ""
}

func (x *Secrets) GetSpectate() string {
	if x != nil {
		return x.Spectate
	}
	return ""
}

func (x *Secrets) GetMatch() string {
	if x != nil {
		return x.Match
	}
	return ""
}

type SentPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op   int64  `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SentPayload) Reset() {
	*x = SentPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentPayload) ProtoMessage() {}

func (x *SentPayload) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentPayload.ProtoReflect.Descriptor instead.
func (*SentPayload) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{85}
}

func (x *SentPayload) GetOp() int64 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *SentPayload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SessionStartLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total          int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Remaining      int64 `protobuf:"varint,2,opt,name=remaining,proto3" json:"remaining,omitempty"`
	ResetAfter     int64 `protobuf:"varint,3,opt,name=resetAfter,proto3" json:"resetAfter,omitempty"`
	MaxConcurrency int64 `protobuf:"varint,4,opt,name=maxConcurrency,proto3" json:"maxConcurrency,omitempty"`
}

func (x *SessionStartLimit) Reset() {
	*x = SessionStartLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionStartLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionStartLimit) ProtoMessage() {}

func (x *SessionStartLimit) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionStartLimit.ProtoReflect.Descriptor instead.
func (*SessionStartLimit) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{86}
}

func (x *SessionStartLimit) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SessionStartLimit) GetRemaining() int64 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *SessionStartLimit) GetResetAfter() int64 {
	if x != nil {
		return x.ResetAfter
	}
	return 0
}

func (x *SessionStartLimit) GetMaxConcurrency() int64 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

type StageInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildID              int64  `protobuf:"varint,2,opt,name=guildID,proto3" json:"guildID,omitempty"`
	ChannelID            int64  `protobuf:"varint,3,opt,name=channelID,proto3" json:"channelID,omitempty"`
	Topic                string `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	PrivacyLabel         int64  `protobuf:"varint,5,opt,name=privacyLabel,proto3" json:"privacyLabel,omitempty"`
	DiscoverableDisabled bool   `protobuf:"varint,6,opt,name=discoverableDisabled,proto3" json:"discoverableDisabled,omitempty"`
}

func (x *StageInstance) Reset() {
	*x = StageInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageInstance) ProtoMessage() {}

func (x *StageInstance) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageInstance.ProtoReflect.Descriptor instead.
func (*StageInstance) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{87}
}

func (x *StageInstance) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StageInstance) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *StageInstance) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *StageInstance) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *StageInstance) GetPrivacyLabel() int64 {
	if x != nil {
		return x.PrivacyLabel
	}
	return 0
}

func (x *StageInstance) GetDiscoverableDisabled() bool {
	if x != nil {
		return x.DiscoverableDisabled
	}
	return false
}

type Sticker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PackID      int64  `protobuf:"varint,2,opt,name=packID,proto3" json:"packID,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Tags        string `protobuf:"bytes,5,opt,name=tags,proto3" json:"tags,omitempty"`
	Type        int64  `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	FormatType  int64  `protobuf:"varint,7,opt,name=formatType,proto3" json:"formatType,omitempty"`
	Available   bool   `protobuf:"varint,8,opt,name=available,proto3" json:"available,omitempty"`
	GuildID     int64  `protobuf:"varint,9,opt,name=guildID,proto3" json:"guildID,omitempty"`
	User        *User  `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
	SortValue   int64  `protobuf:"varint,11,opt,name=sortValue,proto3" json:"sortValue,omitempty"`
}

func (x *Sticker) Reset() {
	*x = Sticker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sticker) ProtoMessage() {}

func (x *Sticker) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sticker.ProtoReflect.Descriptor instead.
func (*Sticker) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{88}
}

func (x *Sticker) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sticker) GetPackID() int64 {
	if x != nil {
		return x.PackID
	}
	return 0
}

func (x *Sticker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sticker) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Sticker) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Sticker) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Sticker) GetFormatType() int64 {
	if x != nil {
		return x.FormatType
	}
	return 0
}

func (x *Sticker) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *Sticker) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *Sticker) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Sticker) GetSortValue() int64 {
	if x != nil {
		return x.SortValue
	}
	return 0
}

type ThreadCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *ThreadCreate) Reset() {
	*x = ThreadCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadCreate) ProtoMessage() {}

func (x *ThreadCreate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadCreate.ProtoReflect.Descriptor instead.
func (*ThreadCreate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{89}
}

func (x *ThreadCreate) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ThreadDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *ThreadDelete) Reset() {
	*x = ThreadDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadDelete) ProtoMessage() {}

func (x *ThreadDelete) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadDelete.ProtoReflect.Descriptor instead.
func (*ThreadDelete) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{90}
}

func (x *ThreadDelete) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ThreadListSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID    int64           `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	ChannelIDs []int64         `protobuf:"varint,2,rep,packed,name=channelIDs,proto3" json:"channelIDs,omitempty"`
	Threads    []*Channel      `protobuf:"bytes,3,rep,name=threads,proto3" json:"threads,omitempty"`
	Members    []*ThreadMember `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *ThreadListSync) Reset() {
	*x = ThreadListSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadListSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadListSync) ProtoMessage() {}

func (x *ThreadListSync) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadListSync.ProtoReflect.Descriptor instead.
func (*ThreadListSync) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{91}
}

func (x *ThreadListSync) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *ThreadListSync) GetChannelIDs() []int64 {
	if x != nil {
		return x.ChannelIDs
	}
	return nil
}

func (x *ThreadListSync) GetThreads() []*Channel {
	if x != nil {
		return x.Threads
	}
	return nil
}

func (x *ThreadListSync) GetMembers() []*ThreadMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type ThreadMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserID        int64  `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
	JoinTimestamp string `protobuf:"bytes,3,opt,name=joinTimestamp,proto3" json:"joinTimestamp,omitempty"`
	Flags         int64  `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *ThreadMember) Reset() {
	*x = ThreadMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadMember) ProtoMessage() {}

func (x *ThreadMember) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadMember.ProtoReflect.Descriptor instead.
func (*ThreadMember) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{92}
}

func (x *ThreadMember) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ThreadMember) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ThreadMember) GetJoinTimestamp() string {
	if x != nil {
		return x.JoinTimestamp
	}
	return ""
}

func (x *ThreadMember) GetFlags() int64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type ThreadMembersUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GuildID          int64           `protobuf:"varint,2,opt,name=guildID,proto3" json:"guildID,omitempty"`
	MemberCount      int64           `protobuf:"varint,3,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	AddedMembers     []*ThreadMember `protobuf:"bytes,4,rep,name=addedMembers,proto3" json:"addedMembers,omitempty"`
	RemovedMemberIDs []int64         `protobuf:"varint,5,rep,packed,name=removedMemberIDs,proto3" json:"removedMemberIDs,omitempty"`
}

func (x *ThreadMembersUpdate) Reset() {
	*x = ThreadMembersUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadMembersUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadMembersUpdate) ProtoMessage() {}

func (x *ThreadMembersUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadMembersUpdate.ProtoReflect.Descriptor instead.
func (*ThreadMembersUpdate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{93}
}

func (x *ThreadMembersUpdate) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ThreadMembersUpdate) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *ThreadMembersUpdate) GetMemberCount() int64 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *ThreadMembersUpdate) GetAddedMembers() []*ThreadMember {
	if x != nil {
		return x.AddedMembers
	}
	return nil
}

func (x *ThreadMembersUpdate) GetRemovedMemberIDs() []int64 {
	if x != nil {
		return x.RemovedMemberIDs
	}
	return nil
}

type ThreadMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Archived            bool   `protobuf:"varint,1,opt,name=archived,proto3" json:"archived,omitempty"`
	AutoArchiveDuration int64  `protobuf:"varint,2,opt,name=autoArchiveDuration,proto3" json:"autoArchiveDuration,omitempty"`
	ArchiveTimestamp    string `protobuf:"bytes,3,opt,name=archiveTimestamp,proto3" json:"archiveTimestamp,omitempty"`
	Locked              bool   `protobuf:"varint,4,opt,name=locked,proto3" json:"locked,omitempty"`
}

func (x *ThreadMetadata) Reset() {
	*x = ThreadMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadMetadata) ProtoMessage() {}

func (x *ThreadMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadMetadata.ProtoReflect.Descriptor instead.
func (*ThreadMetadata) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{94}
}

func (x *ThreadMetadata) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *ThreadMetadata) GetAutoArchiveDuration() int64 {
	if x != nil {
		return x.AutoArchiveDuration
	}
	return 0
}

func (x *ThreadMetadata) GetArchiveTimestamp() string {
	if x != nil {
		return x.ArchiveTimestamp
	}
	return ""
}

func (x *ThreadMetadata) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

type ThreadUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *ThreadUpdate) Reset() {
	*x = ThreadUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadUpdate) ProtoMessage() {}

func (x *ThreadUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadUpdate.ProtoReflect.Descriptor instead.
func (*ThreadUpdate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{95}
}

func (x *ThreadUpdate) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type Timestamps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Timestamps) Reset() {
	*x = Timestamps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamps) ProtoMessage() {}

func (x *Timestamps) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamps.ProtoReflect.Descriptor instead.
func (*Timestamps) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{96}
}

func (x *Timestamps) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Timestamps) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type TooManyRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	RetryAfter int64  `protobuf:"varint,2,opt,name=retryAfter,proto3" json:"retryAfter,omitempty"`
	Global     bool   `protobuf:"varint,3,opt,name=global,proto3" json:"global,omitempty"`
}

func (x *TooManyRequests) Reset() {
	*x = TooManyRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TooManyRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TooManyRequests) ProtoMessage() {}

func (x *TooManyRequests) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TooManyRequests.ProtoReflect.Descriptor instead.
func (*TooManyRequests) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{97}
}

func (x *TooManyRequests) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TooManyRequests) GetRetryAfter() int64 {
	if x != nil {
		return x.RetryAfter
	}
	return 0
}

func (x *TooManyRequests) GetGlobal() bool {
	if x != nil {
		return x.Global
	}
	return false
}

type TypingStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID int64        `protobuf:"varint,1,opt,name=channelID,proto3" json:"channelID,omitempty"`
	GuildID   int64        `protobuf:"varint,2,opt,name=guildID,proto3" json:"guildID,omitempty"`
	UserID    int64        `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Timestamp int64        `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Member    *GuildMember `protobuf:"bytes,5,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *TypingStart) Reset() {
	*x = TypingStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypingStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypingStart) ProtoMessage() {}

func (x *TypingStart) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypingStart.ProtoReflect.Descriptor instead.
func (*TypingStart) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{98}
}

func (x *TypingStart) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *TypingStart) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *TypingStart) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *TypingStart) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TypingStart) GetMember() *GuildMember {
	if x != nil {
		return x.Member
	}
	return nil
}

type UnavailableGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Unavailable bool  `protobuf:"varint,2,opt,name=unavailable,proto3" json:"unavailable,omitempty"`
}

func (x *UnavailableGuild) Reset() {
	*x = UnavailableGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnavailableGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnavailableGuild) ProtoMessage() {}

func (x *UnavailableGuild) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnavailableGuild.ProtoReflect.Descriptor instead.
func (*UnavailableGuild) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{99}
}

func (x *UnavailableGuild) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UnavailableGuild) GetUnavailable() bool {
	if x != nil {
		return x.Unavailable
	}
	return false
}

type UpdateStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since  int64     `protobuf:"varint,1,opt,name=since,proto3" json:"since,omitempty"`
	Game   *Activity `protobuf:"bytes,2,opt,name=game,proto3" json:"game,omitempty"`
	Status string    `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	AFK    bool      `protobuf:"varint,4,opt,name=AFK,proto3" json:"AFK,omitempty"`
}

func (x *UpdateStatus) Reset() {
	*x = UpdateStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStatus) ProtoMessage() {}

func (x *UpdateStatus) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStatus.ProtoReflect.Descriptor instead.
func (*UpdateStatus) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{100}
}

func (x *UpdateStatus) GetSince() int64 {
	if x != nil {
		return x.Since
	}
	return 0
}

func (x *UpdateStatus) GetGame() *Activity {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *UpdateStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UpdateStatus) GetAFK() bool {
	if x != nil {
		return x.AFK
	}
	return false
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username      string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Discriminator string `protobuf:"bytes,3,opt,name=discriminator,proto3" json:"discriminator,omitempty"`
	Avatar        string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Bot           bool   `protobuf:"varint,5,opt,name=bot,proto3" json:"bot,omitempty"`
	System        bool   `protobuf:"varint,6,opt,name=system,proto3" json:"system,omitempty"`
	MFAEnabled    bool   `protobuf:"varint,7,opt,name=MFAEnabled,proto3" json:"MFAEnabled,omitempty"`
	Banner        string `protobuf:"bytes,8,opt,name=banner,proto3" json:"banner,omitempty"`
	Locale        string `protobuf:"bytes,9,opt,name=locale,proto3" json:"locale,omitempty"`
	Verified      bool   `protobuf:"varint,10,opt,name=verified,proto3" json:"verified,omitempty"`
	Email         string `protobuf:"bytes,11,opt,name=email,proto3" json:"email,omitempty"`
	Flags         int64  `protobuf:"varint,12,opt,name=flags,proto3" json:"flags,omitempty"`
	PremiumType   int64  `protobuf:"varint,13,opt,name=premiumType,proto3" json:"premiumType,omitempty"`
	PublicFlags   int64  `protobuf:"varint,14,opt,name=publicFlags,proto3" json:"publicFlags,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{101}
}

func (x *User) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetDiscriminator() string {
	if x != nil {
		return x.Discriminator
	}
	return ""
}

func (x *User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *User) GetBot() bool {
	if x != nil {
		return x.Bot
	}
	return false
}

func (x *User) GetSystem() bool {
	if x != nil {
		return x.System
	}
	return false
}

func (x *User) GetMFAEnabled() bool {
	if x != nil {
		return x.MFAEnabled
	}
	return false
}

func (x *User) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *User) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *User) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetFlags() int64 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *User) GetPremiumType() int64 {
	if x != nil {
		return x.PremiumType
	}
	return 0
}

func (x *User) GetPublicFlags() int64 {
	if x != nil {
		return x.PublicFlags
	}
	return 0
}

type VoiceServerUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	GuildID  int64  `protobuf:"varint,2,opt,name=guildID,proto3" json:"guildID,omitempty"`
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *VoiceServerUpdate) Reset() {
	*x = VoiceServerUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceServerUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceServerUpdate) ProtoMessage() {}

func (x *VoiceServerUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceServerUpdate.ProtoReflect.Descriptor instead.
func (*VoiceServerUpdate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{102}
}

func (x *VoiceServerUpdate) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *VoiceServerUpdate) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *VoiceServerUpdate) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type VoiceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID   int64        `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	ChannelID int64        `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
	UserID    int64        `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Member    *GuildMember `protobuf:"bytes,4,opt,name=member,proto3" json:"member,omitempty"`
	SessionID string       `protobuf:"bytes,5,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Deaf      bool         `protobuf:"varint,6,opt,name=deaf,proto3" json:"deaf,omitempty"`
	Mute      bool         `protobuf:"varint,7,opt,name=mute,proto3" json:"mute,omitempty"`
	SelfDeaf  bool         `protobuf:"varint,8,opt,name=selfDeaf,proto3" json:"selfDeaf,omitempty"`
	SelfMute  bool         `protobuf:"varint,9,opt,name=selfMute,proto3" json:"selfMute,omitempty"`
	Suppress  bool         `protobuf:"varint,10,opt,name=suppress,proto3" json:"suppress,omitempty"`
}

func (x *VoiceState) Reset() {
	*x = VoiceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceState) ProtoMessage() {}

func (x *VoiceState) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceState.ProtoReflect.Descriptor instead.
func (*VoiceState) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{103}
}

func (x *VoiceState) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *VoiceState) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *VoiceState) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *VoiceState) GetMember() *GuildMember {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *VoiceState) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *VoiceState) GetDeaf() bool {
	if x != nil {
		return x.Deaf
	}
	return false
}

func (x *VoiceState) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *VoiceState) GetSelfDeaf() bool {
	if x != nil {
		return x.SelfDeaf
	}
	return false
}

func (x *VoiceState) GetSelfMute() bool {
	if x != nil {
		return x.SelfMute
	}
	return false
}

func (x *VoiceState) GetSuppress() bool {
	if x != nil {
		return x.Suppress
	}
	return false
}

type VoiceStateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID                 int64        `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	ChannelID               int64        `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
	UserID                  int64        `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Member                  *GuildMember `protobuf:"bytes,4,opt,name=member,proto3" json:"member,omitempty"`
	SessionID               string       `protobuf:"bytes,5,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Deaf                    bool         `protobuf:"varint,6,opt,name=deaf,proto3" json:"deaf,omitempty"`
	Mute                    bool         `protobuf:"varint,7,opt,name=mute,proto3" json:"mute,omitempty"`
	SelfDeaf                bool         `protobuf:"varint,8,opt,name=selfDeaf,proto3" json:"selfDeaf,omitempty"`
	SelfMute                bool         `protobuf:"varint,9,opt,name=selfMute,proto3" json:"selfMute,omitempty"`
	SelfStream              bool         `protobuf:"varint,10,opt,name=selfStream,proto3" json:"selfStream,omitempty"`
	SelfVideo               bool         `protobuf:"varint,11,opt,name=selfVideo,proto3" json:"selfVideo,omitempty"`
	Suppress                bool         `protobuf:"varint,12,opt,name=suppress,proto3" json:"suppress,omitempty"`
	RequestToSpeakTimestamp string       `protobuf:"bytes,13,opt,name=requestToSpeakTimestamp,proto3" json:"requestToSpeakTimestamp,omitempty"`
}

func (x *VoiceStateUpdate) Reset() {
	*x = VoiceStateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceStateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceStateUpdate) ProtoMessage() {}

func (x *VoiceStateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceStateUpdate.ProtoReflect.Descriptor instead.
func (*VoiceStateUpdate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{104}
}

func (x *VoiceStateUpdate) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *VoiceStateUpdate) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *VoiceStateUpdate) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *VoiceStateUpdate) GetMember() *GuildMember {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *VoiceStateUpdate) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *VoiceStateUpdate) GetDeaf() bool {
	if x != nil {
		return x.Deaf
	}
	return false
}

func (x *VoiceStateUpdate) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *VoiceStateUpdate) GetSelfDeaf() bool {
	if x != nil {
		return x.SelfDeaf
	}
	return false
}

func (x *VoiceStateUpdate) GetSelfMute() bool {
	if x != nil {
		return x.SelfMute
	}
	return false
}

func (x *VoiceStateUpdate) GetSelfStream() bool {
	if x != nil {
		return x.SelfStream
	}
	return false
}

func (x *VoiceStateUpdate) GetSelfVideo() bool {
	if x != nil {
		return x.SelfVideo
	}
	return false
}

func (x *VoiceStateUpdate) GetSuppress() bool {
	if x != nil {
		return x.Suppress
	}
	return false
}

func (x *VoiceStateUpdate) GetRequestToSpeakTimestamp() string {
	if x != nil {
		return x.RequestToSpeakTimestamp
	}
	return ""
}

type Webhook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          int64  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	GuildID       int64  `protobuf:"varint,3,opt,name=guildID,proto3" json:"guildID,omitempty"`
	ChannelID     int64  `protobuf:"varint,4,opt,name=channelID,proto3" json:"channelID,omitempty"`
	User          *User  `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Name          string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Avatar        string `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Token         string `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	ApplicationID int64  `protobuf:"varint,9,opt,name=applicationID,proto3" json:"applicationID,omitempty"`
}

func (x *Webhook) Reset() {
	*x = Webhook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Webhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Webhook) ProtoMessage() {}

func (x *Webhook) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Webhook.ProtoReflect.Descriptor instead.
func (*Webhook) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{105}
}

func (x *Webhook) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Webhook) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Webhook) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *Webhook) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *Webhook) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Webhook) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Webhook) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Webhook) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Webhook) GetApplicationID() int64 {
	if x != nil {
		return x.ApplicationID
	}
	return 0
}

type WebhookMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content         string                    `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Username        string                    `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	AvatarURL       string                    `protobuf:"bytes,3,opt,name=avatarURL,proto3" json:"avatarURL,omitempty"`
	TTS             bool                      `protobuf:"varint,4,opt,name=TTS,proto3" json:"TTS,omitempty"`
	Embeds          []*Embed                  `protobuf:"bytes,5,rep,name=embeds,proto3" json:"embeds,omitempty"`
	AllowedMentions []*MessageAllowedMentions `protobuf:"bytes,6,rep,name=allowedMentions,proto3" json:"allowedMentions,omitempty"`
	Components      []*InteractionComponent   `protobuf:"bytes,7,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *WebhookMessage) Reset() {
	*x = WebhookMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookMessage) ProtoMessage() {}

func (x *WebhookMessage) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookMessage.ProtoReflect.Descriptor instead.
func (*WebhookMessage) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{106}
}

func (x *WebhookMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *WebhookMessage) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *WebhookMessage) GetAvatarURL() string {
	if x != nil {
		return x.AvatarURL
	}
	return ""
}

func (x *WebhookMessage) GetTTS() bool {
	if x != nil {
		return x.TTS
	}
	return false
}

func (x *WebhookMessage) GetEmbeds() []*Embed {
	if x != nil {
		return x.Embeds
	}
	return nil
}

func (x *WebhookMessage) GetAllowedMentions() []*MessageAllowedMentions {
	if x != nil {
		return x.AllowedMentions
	}
	return nil
}

func (x *WebhookMessage) GetComponents() []*InteractionComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

type WebhookUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildID   int64 `protobuf:"varint,1,opt,name=guildID,proto3" json:"guildID,omitempty"`
	ChannelID int64 `protobuf:"varint,2,opt,name=channelID,proto3" json:"channelID,omitempty"`
}

func (x *WebhookUpdate) Reset() {
	*x = WebhookUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_discord_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookUpdate) ProtoMessage() {}

func (x *WebhookUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_discord_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookUpdate.ProtoReflect.Descriptor instead.
func (*WebhookUpdate) Descriptor() ([]byte, []int) {
	return file_discord_proto_rawDescGZIP(), []int{107}
}

func (x *WebhookUpdate) GetGuildID() int64 {
	if x != nil {
		return x.GuildID
	}
	return 0
}

func (x *WebhookUpdate) GetChannelID() int64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

var File_discord_proto protoreflect.FileDescriptor

var file_discord_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x22, 0x2d, 0x0a, 0x07, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x03, 0x0a, 0x08, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x34, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x07,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xc6, 0x04, 0x0a, 0x0b,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x70, 0x63, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x70, 0x63, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x62, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x52, 0x4c, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x52, 0x4c, 0x12,
	0x24, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a,
	0x04, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x04, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x53, 0x4b, 0x55, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x4b, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x82, 0x02, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4a, 0x0a, 0x1e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x05, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xa6, 0x01,
	0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65,
	0x61, 0x6d, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x06, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x22,
	0x8b, 0x07, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52,
	0x14, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x53, 0x46, 0x57, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4e,
	0x53, 0x46, 0x57, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x74, 0x63,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x74,
	0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3a, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0c, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1a, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3c, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2b,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x3c, 0x0a, 0x0d, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x60, 0x0a, 0x10, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x6e, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x65, 0x6e, 0x79, 0x22, 0x77, 0x0a, 0x11, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x69, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x3c, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x22, 0x52, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x65, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x77, 0x65, 0x62, 0x22, 0xea, 0x03, 0x0a, 0x05, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a,
	0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0x71, 0x0a, 0x0b, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x63, 0x6f, 0x6e,
	0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55,
	0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x55,
	0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49,
	0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x22, 0x4e, 0x0a, 0x0a, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x5f, 0x0a, 0x0b, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x46,
	0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e,
	0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x63, 0x6f, 0x6e,
	0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x49, 0x63, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x22, 0x68, 0x0a, 0x0a, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x22, 0x35, 0x0a, 0x0d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x6c, 0x0a, 0x0e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x4c, 0x0a, 0x0a, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x22, 0xdf, 0x01, 0x0a, 0x05, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6c, 0x6f,
	0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x1b, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x8b, 0x01, 0x0a, 0x0a, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42,
	0x6f, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x53, 0x0a, 0x11,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42, 0x6f, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x11,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42, 0x6f, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x64, 0x0a,
	0x0e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x6f, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xca, 0x0e, 0x0a, 0x05, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x70, 0x6c, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x70, 0x6c,
	0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x66, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x66, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x66, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x66, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x40, 0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x06, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x06,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x66, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x66, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x2e,
	0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75,
	0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0b,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x55, 0x52,
	0x4c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x6e,
	0x69, 0x74, 0x79, 0x55, 0x52, 0x4c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x54, 0x69, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x54, 0x69, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x18,
	0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61,
	0x78, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x36,
	0x0a, 0x16, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x73, 0x66, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x73, 0x66, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x30, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x08, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x22, 0x4b, 0x0a, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x61, 0x6e, 0x41, 0x64, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x4e, 0x0a,
	0x0e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x48, 0x0a,
	0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x05,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x05, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x7a, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x6c, 0x61, 0x7a, 0x79, 0x22, 0x56, 0x0a, 0x11, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x06, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x73, 0x22,
	0x33, 0x0a, 0x17, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x44, 0x22, 0x4a, 0x0a, 0x16, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44,
	0x22, 0xff, 0x01, 0x0a, 0x0b, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x61, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65,
	0x61, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x63, 0x0a, 0x0e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x22, 0x51, 0x0a, 0x11, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x66, 0x0a, 0x11, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x37, 0x0a, 0x0b, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x44, 0x22, 0xee, 0x01, 0x0a, 0x11, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x44, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x22, 0x4f, 0x0a, 0x0f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x22, 0x43, 0x0a, 0x0f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x6f, 0x6c,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x0f, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x5e, 0x0a, 0x13, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x08, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x52, 0x08, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x35, 0x0a, 0x05, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x22, 0x86, 0x02, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x08,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x56, 0x0a, 0x12, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x86, 0x04, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x47, 0x72, 0x61, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x12, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x22, 0x63, 0x0a,
	0x11, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x22, 0x66, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x22, 0xee, 0x02, 0x0a, 0x0b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa2, 0x03, 0x0a, 0x14,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x05,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x05, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xdc, 0x02, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x22,
	0x90, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24,
	0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x0e, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x9b, 0x03, 0x0a, 0x0c, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0xe0, 0x08, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x53, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x54,
	0x54, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x72, 0x79, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x08,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0f,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x06, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x73, 0x12,
	0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x37, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x17, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x63, 0x68, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x08, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x22, 0x7c, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x69, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x57, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x22, 0x5d, 0x0a, 0x11, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x6c, 0x6b,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x22, 0x5e, 0x0a, 0x0f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x52, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x22, 0xd8, 0x01, 0x0a, 0x12, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12,
	0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x05,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x22, 0xac, 0x01, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x25, 0x0a,
	0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x05, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x22, 0x70, 0x0a, 0x18, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x22, 0x99, 0x01, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x05, 0x65,
	0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x52, 0x05, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12,
	0x28, 0x0a, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x49, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x49, 0x66,
	0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x2b, 0x0a, 0x05, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x32, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xe6, 0x01, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x06, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12,
	0x37, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0b, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x22, 0x58, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x09, 0x0a, 0x07, 0x52,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x68, 0x6f, 0x69, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x22, 0x73, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x70,
	0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x31, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xc5, 0x01, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x32, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0xa9, 0x02, 0x0a, 0x07, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x70, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x3b, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x2b, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x3b, 0x0a, 0x0c,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x72, 0x0a, 0x0c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x13, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x0c, 0x61, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0c, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x3b, 0x0a, 0x0c, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x34, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x63, 0x0a,
	0x0f, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x22, 0xaa, 0x01, 0x0a, 0x0b, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c,
	0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x44, 0x0a, 0x10, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x75,
	0x69, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x76, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x67,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x04, 0x67,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x41,
	0x46, 0x4b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x46, 0x4b, 0x22, 0xf6, 0x02,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x72,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62,
	0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x46,
	0x41, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x4d, 0x46, 0x41, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x5f, 0x0a, 0x11, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xa5, 0x02, 0x0a, 0x0a, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63,
	0x68, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x61, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x64, 0x65, 0x61, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x66, 0x44, 0x65, 0x61, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73,
	0x65, 0x6c, 0x66, 0x44, 0x65, 0x61, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4d,
	0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4d,
	0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x22,
	0xa3, 0x03, 0x0a, 0x10, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x61, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x64, 0x65, 0x61, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c,
	0x66, 0x44, 0x65, 0x61, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x66, 0x44, 0x65, 0x61, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4d, 0x75, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x4d, 0x75, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xf1, 0x01, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xab, 0x02, 0x0a, 0x0e, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x52, 0x4c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x52, 0x4c,
	0x12, 0x10, 0x0a, 0x03, 0x54, 0x54, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x54,
	0x54, 0x53, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x52, 0x06, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x63, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x47, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x57,
	0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x65, 0x61, 0x6d, 0x2f, 0x53, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x63, 0x68, 0x2d, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2f, 0x6e, 0x65, 0x78, 0x74,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x63, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_discord_proto_rawDescOnce sync.Once
	file_discord_proto_rawDescData = file_discord_proto_rawDesc
)

func file_discord_proto_rawDescGZIP() []byte {
	file_discord_proto_rawDescOnce.Do(func() {
		file_discord_proto_rawDescData = protoimpl.X.CompressGZIP(file_discord_proto_rawDescData)
	})
	return file_discord_proto_rawDescData
}

var file_discord_proto_msgTypes = make([]protoimpl.MessageInfo, 108)
var file_discord_proto_goTypes = []interface{}{
	(*Account)(nil),                        // 0: sandwich.Account
	(*Activity)(nil),                       // 1: sandwich.Activity
	(*Application)(nil),                    // 2: sandwich.Application
	(*ApplicationCommand)(nil),             // 3: sandwich.ApplicationCommand
	(*ApplicationCommandOption)(nil),       // 4: sandwich.ApplicationCommandOption
	(*ApplicationCommandOptionChoice)(nil), // 5: sandwich.ApplicationCommandOptionChoice
	(*ApplicationSelectOption)(nil),        // 6: sandwich.ApplicationSelectOption
	(*ApplicationTeam)(nil),                // 7: sandwich.ApplicationTeam
	(*ApplicationTeamMember)(nil),          // 8: sandwich.ApplicationTeamMember
	(*Assets)(nil),                         // 9: sandwich.Assets
	(*Channel)(nil),                        // 10: sandwich.Channel
	(*ChannelCreate)(nil),                  // 11: sandwich.ChannelCreate
	(*ChannelDelete)(nil),                  // 12: sandwich.ChannelDelete
	(*ChannelOverwrite)(nil),               // 13: sandwich.ChannelOverwrite
	(*ChannelPinsUpdate)(nil),              // 14: sandwich.ChannelPinsUpdate
	(*ChannelUpdate)(nil),                  // 15: sandwich.ChannelUpdate
	(*ClientStatus)(nil),                   // 16: sandwich.ClientStatus
	(*Embed)(nil),                          // 17: sandwich.Embed
	(*EmbedAuthor)(nil),                    // 18: sandwich.EmbedAuthor
	(*EmbedField)(nil),                     // 19: sandwich.EmbedField
	(*EmbedFooter)(nil),                    // 20: sandwich.EmbedFooter
	(*EmbedImage)(nil),                     // 21: sandwich.EmbedImage
	(*EmbedProvider)(nil),                  // 22: sandwich.EmbedProvider
	(*EmbedThumbnail)(nil),                 // 23: sandwich.EmbedThumbnail
	(*EmbedVideo)(nil),                     // 24: sandwich.EmbedVideo
	(*Emoji)(nil),                          // 25: sandwich.Emoji
	(*Gateway)(nil),                        // 26: sandwich.Gateway
	(*GatewayBot)(nil),                     // 27: sandwich.GatewayBot
	(*GatewayBotSessionStartLimit)(nil),    // 28: sandwich.GatewayBotSessionStartLimit
	(*GatewayPayload)(nil),                 // 29: sandwich.GatewayPayload
	(*Guild)(nil),                          // 30: sandwich.Guild
	(*GuildBanAdd)(nil),                    // 31: sandwich.GuildBanAdd
	(*GuildBanRemove)(nil),                 // 32: sandwich.GuildBanRemove
	(*GuildCreate)(nil),                    // 33: sandwich.GuildCreate
	(*GuildEmojisUpdate)(nil),              // 34: sandwich.GuildEmojisUpdate
	(*GuildIntegrationsUpdate)(nil),        // 35: sandwich.GuildIntegrationsUpdate
	(*GuildJoinRequestDelete)(nil),         // 36: sandwich.GuildJoinRequestDelete
	(*GuildMember)(nil),                    // 37: sandwich.GuildMember
	(*GuildMemberAdd)(nil),                 // 38: sandwich.GuildMemberAdd
	(*GuildMemberRemove)(nil),              // 39: sandwich.GuildMemberRemove
	(*GuildMemberUpdate)(nil),              // 40: sandwich.GuildMemberUpdate
	(*GuildMembersChunk)(nil),              // 41: sandwich.GuildMembersChunk
	(*GuildRoleCreate)(nil),                // 42: sandwich.GuildRoleCreate
	(*GuildRoleDelete)(nil),                // 43: sandwich.GuildRoleDelete
	(*GuildRoleUpdate)(nil),                // 44: sandwich.GuildRoleUpdate
	(*GuildStickersUpdate)(nil),            // 45: sandwich.GuildStickersUpdate
	(*Hello)(nil),                          // 46: sandwich.Hello
	(*Identify)(nil),                       // 47: sandwich.Identify
	(*IdentifyProperties)(nil),             // 48: sandwich.IdentifyProperties
	(*Integration)(nil),                    // 49: sandwich.Integration
	(*IntegrationAccount)(nil),             // 50: sandwich.IntegrationAccount
	(*IntegrationCreate)(nil),              // 51: sandwich.IntegrationCreate
	(*IntegrationDelete)(nil),              // 52: sandwich.IntegrationDelete
	(*IntegrationUpdate)(nil),              // 53: sandwich.IntegrationUpdate
	(*Interaction)(nil),                    // 54: sandwich.Interaction
	(*InteractionComponent)(nil),           // 55: sandwich.InteractionComponent
	(*InteractionData)(nil),                // 56: sandwich.InteractionData
	(*InteractionDataOption)(nil),          // 57: sandwich.InteractionDataOption
	(*InteractionResolvedData)(nil),        // 58: sandwich.InteractionResolvedData
	(*InvalidSession)(nil),                 // 59: sandwich.InvalidSession
	(*InviteCreate)(nil),                   // 60: sandwich.InviteCreate
	(*InviteDelete)(nil),                   // 61: sandwich.InviteDelete
	(*Message)(nil),                        // 62: sandwich.Message
	(*MessageActivity)(nil),                // 63: sandwich.MessageActivity
	(*MessageAllowedMentions)(nil),         // 64: sandwich.MessageAllowedMentions
	(*MessageAttachment)(nil),              // 65: sandwich.MessageAttachment
	(*MessageChannelMention)(nil),          // 66: sandwich.MessageChannelMention
	(*MessageDelete)(nil),                  // 67: sandwich.MessageDelete
	(*MessageDeleteBulk)(nil),              // 68: sandwich.MessageDeleteBulk
	(*MessageReaction)(nil),                // 69: sandwich.MessageReaction
	(*MessageReactionAdd)(nil),             // 70: sandwich.MessageReactionAdd
	(*MessageReactionRemove)(nil),          // 71: sandwich.MessageReactionRemove
	(*MessageReactionRemoveAll)(nil),       // 72: sandwich.MessageReactionRemoveAll
	(*MessageReactionRemoveEmoji)(nil),     // 73: sandwich.MessageReactionRemoveEmoji
	(*MessageReference)(nil),               // 74: sandwich.MessageReference
	(*Party)(nil),                          // 75: sandwich.Party
	(*PresenceUpdate)(nil),                 // 76: sandwich.PresenceUpdate
	(*Ready)(nil),                          // 77: sandwich.Ready
	(*Reconnect)(nil),                      // 78: sandwich.Reconnect
	(*RequestGuildMembers)(nil),            // 79: sandwich.RequestGuildMembers
	(*Resume)(nil),                         // 80: sandwich.Resume
	(*Resumed)(nil),                        // 81: sandwich.Resumed
	(*Role)(nil),                           // 82: sandwich.Role
	(*RoleTag)(nil),                        // 83: sandwich.RoleTag
	(*Secrets)(nil),                        // 84: sandwich.Secrets
	(*SentPayload)(nil),                    // 85: sandwich.SentPayload
	(*SessionStartLimit)(nil),              // 86: sandwich.SessionStartLimit
	(*StageInstance)(nil),                  // 87: sandwich.StageInstance
	(*Sticker)(nil),                        // 88: sandwich.Sticker
	(*ThreadCreate)(nil),                   // 89: sandwich.ThreadCreate
	(*ThreadDelete)(nil),                   // 90: sandwich.ThreadDelete
	(*ThreadListSync)(nil),                 // 91: sandwich.ThreadListSync
	(*ThreadMember)(nil),                   // 92: sandwich.ThreadMember
	(*ThreadMembersUpdate)(nil),            // 93: sandwich.ThreadMembersUpdate
	(*ThreadMetadata)(nil),                 // 94: sandwich.ThreadMetadata
	(*ThreadUpdate)(nil),                   // 95: sandwich.ThreadUpdate
	(*Timestamps)(nil),                     // 96: sandwich.Timestamps
	(*TooManyRequests)(nil),                // 97: sandwich.TooManyRequests
	(*TypingStart)(nil),                    // 98: sandwich.TypingStart
	(*UnavailableGuild)(nil),               // 99: sandwich.UnavailableGuild
	(*UpdateStatus)(nil),                   // 100: sandwich.UpdateStatus
	(*User)(nil),                           // 101: sandwich.User
	(*VoiceServerUpdate)(nil),              // 102: sandwich.VoiceServerUpdate
	(*VoiceState)(nil),                     // 103: sandwich.VoiceState
	(*VoiceStateUpdate)(nil),               // 104: sandwich.VoiceStateUpdate
	(*Webhook)(nil),                        // 105: sandwich.Webhook
	(*WebhookMessage)(nil),                 // 106: sandwich.WebhookMessage
	(*WebhookUpdate)(nil),                  // 107: sandwich.WebhookUpdate
}
var file_discord_proto_depIdxs = []int32{
	96,  // 0: sandwich.Activity.timestamps:type_name -> sandwich.Timestamps
	75,  // 1: sandwich.Activity.party:type_name -> sandwich.Party
	9,   // 2: sandwich.Activity.assets:type_name -> sandwich.Assets
	84,  // 3: sandwich.Activity.secrets:type_name -> sandwich.Secrets
	101, // 4: sandwich.Application.owner:type_name -> sandwich.User
	7,   // 5: sandwich.Application.team:type_name -> sandwich.ApplicationTeam
	4,   // 6: sandwich.ApplicationCommand.options:type_name -> sandwich.ApplicationCommandOption
	5,   // 7: sandwich.ApplicationCommandOption.choices:type_name -> sandwich.ApplicationCommandOptionChoice
	4,   // 8: sandwich.ApplicationCommandOption.options:type_name -> sandwich.ApplicationCommandOption
	25,  // 9: sandwich.ApplicationSelectOption.emoji:type_name -> sandwich.Emoji
	8,   // 10: sandwich.ApplicationTeam.members:type_name -> sandwich.ApplicationTeamMember
	101, // 11: sandwich.ApplicationTeamMember.user:type_name -> sandwich.User
	13,  // 12: sandwich.Channel.permissionOverwrites:type_name -> sandwich.ChannelOverwrite
	101, // 13: sandwich.Channel.recipients:type_name -> sandwich.User
	94,  // 14: sandwich.Channel.threadMetadata:type_name -> sandwich.ThreadMetadata
	92,  // 15: sandwich.Channel.threadMember:type_name -> sandwich.ThreadMember
	10,  // 16: sandwich.ChannelCreate.channel:type_name -> sandwich.Channel
	10,  // 17: sandwich.ChannelDelete.channel:type_name -> sandwich.Channel
	10,  // 18: sandwich.ChannelUpdate.channel:type_name -> sandwich.Channel
	20,  // 19: sandwich.Embed.footer:type_name -> sandwich.EmbedFooter
	21,  // 20: sandwich.Embed.image:type_name -> sandwich.EmbedImage
	23,  // 21: sandwich.Embed.thumbnail:type_name -> sandwich.EmbedThumbnail
	24,  // 22: sandwich.Embed.video:type_name -> sandwich.EmbedVideo
	22,  // 23: sandwich.Embed.provider:type_name -> sandwich.EmbedProvider
	18,  // 24: sandwich.Embed.author:type_name -> sandwich.EmbedAuthor
	19,  // 25: sandwich.Embed.fields:type_name -> sandwich.EmbedField
	101, // 26: sandwich.Emoji.user:type_name -> sandwich.User
	28,  // 27: sandwich.GatewayBot.sessionStartLimit:type_name -> sandwich.GatewayBotSessionStartLimit
	82,  // 28: sandwich.Guild.roles:type_name -> sandwich.Role
	25,  // 29: sandwich.Guild.emojis:type_name -> sandwich.Emoji
	103, // 30: sandwich.Guild.voiceStates:type_name -> sandwich.VoiceState
	37,  // 31: sandwich.Guild.members:type_name -> sandwich.GuildMember
	10,  // 32: sandwich.Guild.channels:type_name -> sandwich.Channel
	1,   // 33: sandwich.Guild.presences:type_name -> sandwich.Activity
	87,  // 34: sandwich.Guild.stageInstances:type_name -> sandwich.StageInstance
	88,  // 35: sandwich.Guild.stickers:type_name -> sandwich.Sticker
	101, // 36: sandwich.GuildBanAdd.user:type_name -> sandwich.User
	101, // 37: sandwich.GuildBanRemove.user:type_name -> sandwich.User
	30,  // 38: sandwich.GuildCreate.guild:type_name -> sandwich.Guild
	25,  // 39: sandwich.GuildEmojisUpdate.emojis:type_name -> sandwich.Emoji
	101, // 40: sandwich.GuildMember.user:type_name -> sandwich.User
	37,  // 41: sandwich.GuildMemberAdd.guildMember:type_name -> sandwich.GuildMember
	101, // 42: sandwich.GuildMemberRemove.user:type_name -> sandwich.User
	37,  // 43: sandwich.GuildMemberUpdate.guildMember:type_name -> sandwich.GuildMember
	37,  // 44: sandwich.GuildMembersChunk.members:type_name -> sandwich.GuildMember
	82,  // 45: sandwich.GuildRoleCreate.role:type_name -> sandwich.Role
	82,  // 46: sandwich.GuildRoleUpdate.role:type_name -> sandwich.Role
	88,  // 47: sandwich.GuildStickersUpdate.stickers:type_name -> sandwich.Sticker
	48,  // 48: sandwich.Identify.properties:type_name -> sandwich.IdentifyProperties
	100, // 49: sandwich.Identify.presence:type_name -> sandwich.UpdateStatus
	101, // 50: sandwich.Integration.user:type_name -> sandwich.User
	50,  // 51: sandwich.Integration.account:type_name -> sandwich.IntegrationAccount
	2,   // 52: sandwich.Integration.application:type_name -> sandwich.Application
	49,  // 53: sandwich.IntegrationCreate.integration:type_name -> sandwich.Integration
	49,  // 54: sandwich.IntegrationUpdate.integration:type_name -> sandwich.Integration
	56,  // 55: sandwich.Interaction.data:type_name -> sandwich.InteractionData
	37,  // 56: sandwich.Interaction.member:type_name -> sandwich.GuildMember
	101, // 57: sandwich.Interaction.user:type_name -> sandwich.User
	62,  // 58: sandwich.Interaction.message:type_name -> sandwich.Message
	25,  // 59: sandwich.InteractionComponent.emoji:type_name -> sandwich.Emoji
	6,   // 60: sandwich.InteractionComponent.options:type_name -> sandwich.ApplicationSelectOption
	55,  // 61: sandwich.InteractionComponent.components:type_name -> sandwich.InteractionComponent
	58,  // 62: sandwich.InteractionData.resolved:type_name -> sandwich.InteractionResolvedData
	57,  // 63: sandwich.InteractionData.options:type_name -> sandwich.InteractionDataOption
	6,   // 64: sandwich.InteractionData.values:type_name -> sandwich.ApplicationSelectOption
	57,  // 65: sandwich.InteractionDataOption.options:type_name -> sandwich.InteractionDataOption
	101, // 66: sandwich.InteractionResolvedData.users:type_name -> sandwich.User
	37,  // 67: sandwich.InteractionResolvedData.members:type_name -> sandwich.GuildMember
	82,  // 68: sandwich.InteractionResolvedData.roles:type_name -> sandwich.Role
	10,  // 69: sandwich.InteractionResolvedData.channels:type_name -> sandwich.Channel
	62,  // 70: sandwich.InteractionResolvedData.messages:type_name -> sandwich.Message
	101, // 71: sandwich.InviteCreate.inviter:type_name -> sandwich.User
	101, // 72: sandwich.InviteCreate.targetUser:type_name -> sandwich.User
	2,   // 73: sandwich.InviteCreate.targetApplication:type_name -> sandwich.Application
	101, // 74: sandwich.Message.author:type_name -> sandwich.User
	37,  // 75: sandwich.Message.member:type_name -> sandwich.GuildMember
	101, // 76: sandwich.Message.mentions:type_name -> sandwich.User
	66,  // 77: sandwich.Message.mentionChannels:type_name -> sandwich.MessageChannelMention
	65,  // 78: sandwich.Message.attachments:type_name -> sandwich.MessageAttachment
	17,  // 79: sandwich.Message.embeds:type_name -> sandwich.Embed
	69,  // 80: sandwich.Message.reactions:type_name -> sandwich.MessageReaction
	63,  // 81: sandwich.Message.activity:type_name -> sandwich.MessageActivity
	2,   // 82: sandwich.Message.application:type_name -> sandwich.Application
	74,  // 83: sandwich.Message.messageReference:type_name -> sandwich.MessageReference
	55,  // 84: sandwich.Message.components:type_name -> sandwich.InteractionComponent
	88,  // 85: sandwich.Message.stickers:type_name -> sandwich.Sticker
	62,  // 86: sandwich.Message.referencedMessage:type_name -> sandwich.Message
	25,  // 87: sandwich.MessageReaction.emoji:type_name -> sandwich.Emoji
	37,  // 88: sandwich.MessageReactionAdd.member:type_name -> sandwich.GuildMember
	25,  // 89: sandwich.MessageReactionAdd.emoji:type_name -> sandwich.Emoji
	25,  // 90: sandwich.MessageReactionRemove.emoji:type_name -> sandwich.Emoji
	25,  // 91: sandwich.MessageReactionRemoveEmoji.emoji:type_name -> sandwich.Emoji
	101, // 92: sandwich.PresenceUpdate.user:type_name -> sandwich.User
	1,   // 93: sandwich.PresenceUpdate.activities:type_name -> sandwich.Activity
	16,  // 94: sandwich.PresenceUpdate.clientStatus:type_name -> sandwich.ClientStatus
	101, // 95: sandwich.Ready.user:type_name -> sandwich.User
	99,  // 96: sandwich.Ready.guilds:type_name -> sandwich.UnavailableGuild
	2,   // 97: sandwich.Ready.application:type_name -> sandwich.Application
	83,  // 98: sandwich.Role.tags:type_name -> sandwich.RoleTag
	101, // 99: sandwich.Sticker.user:type_name -> sandwich.User
	10,  // 100: sandwich.ThreadCreate.channel:type_name -> sandwich.Channel
	10,  // 101: sandwich.ThreadDelete.channel:type_name -> sandwich.Channel
	10,  // 102: sandwich.ThreadListSync.threads:type_name -> sandwich.Channel
	92,  // 103: sandwich.ThreadListSync.members:type_name -> sandwich.ThreadMember
	92,  // 104: sandwich.ThreadMembersUpdate.addedMembers:type_name -> sandwich.ThreadMember
	10,  // 105: sandwich.ThreadUpdate.channel:type_name -> sandwich.Channel
	37,  // 106: sandwich.TypingStart.member:type_name -> sandwich.GuildMember
	1,   // 107: sandwich.UpdateStatus.game:type_name -> sandwich.Activity
	37,  // 108: sandwich.VoiceState.member:type_name -> sandwich.GuildMember
	37,  // 109: sandwich.VoiceStateUpdate.member:type_name -> sandwich.GuildMember
	101, // 110: sandwich.Webhook.user:type_name -> sandwich.User
	17,  // 111: sandwich.WebhookMessage.embeds:type_name -> sandwich.Embed
	64,  // 112: sandwich.WebhookMessage.allowedMentions:type_name -> sandwich.MessageAllowedMentions
	55,  // 113: sandwich.WebhookMessage.components:type_name -> sandwich.InteractionComponent
	114, // [114:114] is the sub-list for method output_type
	114, // [114:114] is the sub-list for method input_type
	114, // [114:114] is the sub-list for extension type_name
	114, // [114:114] is the sub-list for extension extendee
	0,   // [0:114] is the sub-list for field type_name
}

func init() { file_discord_proto_init() }
func file_discord_proto_init() {
	if File_discord_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_discord_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationCommandOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationCommandOptionChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationSelectOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationTeamMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelOverwrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelPinsUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Embed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedAuthor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedFooter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedThumbnail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emoji); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayBot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayBotSessionStartLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Guild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBanAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildBanRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildEmojisUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildIntegrationsUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildJoinRequestDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMemberAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMemberRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMemberUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildMembersChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildRoleCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildRoleDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildRoleUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuildStickersUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifyProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionDataOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionResolvedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageAllowedMentions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageChannelMention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageDeleteBulk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReactionAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReactionRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReactionRemoveAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReactionRemoveEmoji); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Party); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ready); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reconnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGuildMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resumed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secrets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionStartLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sticker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadListSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadMembersUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TooManyRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypingStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnavailableGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceServerUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceStateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Webhook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_discord_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_discord_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   108,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_discord_proto_goTypes,
		DependencyIndexes: file_discord_proto_depIdxs,
		MessageInfos:      file_discord_proto_msgTypes,
	}.Build()
	File_discord_proto = out.File
	file_discord_proto_rawDesc = nil
	file_discord_proto_goTypes = nil
	file_discord_proto_depIdxs = nil
}
